diff --git a/CMakeLists.txt b/CMakeLists.txt
index 36e1d89..5bd4fa3 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,5 +1,5 @@
 cmake_minimum_required(VERSION 3.12)
-project(Crunch2 VERSION "1.2.0")
+project(crunch2 VERSION "1.2.0")
 
 if(EXISTS "${CMAKE_CURRENT_SOURCE_DIR}/conanbuildinfo.cmake")
     include("${CMAKE_CURRENT_SOURCE_DIR}/conanbuildinfo.cmake")
diff --git a/cmake/config.cmake.in b/cmake/config.cmake.in
new file mode 100644
index 0000000..0fedff8
--- /dev/null
+++ b/cmake/config.cmake.in
@@ -0,0 +1 @@
+include(${CMAKE_CURRENT_LIST_DIR}/@PROJECT_NAME@-targets.cmake)
diff --git a/crnlib/CMakeLists.txt b/crnlib/CMakeLists.txt
index 7571707..b2ec9b7 100644
--- a/crnlib/CMakeLists.txt
+++ b/crnlib/CMakeLists.txt
@@ -133,9 +133,9 @@ set(CRNLIB_SRCS
     ${CMAKE_CURRENT_SOURCE_DIR}/crn_vector2d.h
     ${CMAKE_CURRENT_SOURCE_DIR}/crn_version.cpp
     ${CMAKE_CURRENT_SOURCE_DIR}/crnlib.cpp
-    ${CMAKE_CURRENT_SOURCE_DIR}/../inc/crn_decomp.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/../inc/crnlib.h
-    ${CMAKE_CURRENT_SOURCE_DIR}/../inc/dds_defs.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/crn_decomp.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/crnlib.h
+    ${CMAKE_CURRENT_SOURCE_DIR}/dds_defs.h
 )
 
 if(WIN32)
@@ -158,17 +158,15 @@ else()
     endif()
 endif()
 
-add_library(crn ${CRNLIB_SRCS})
-set_property(TARGET crn PROPERTY CXX_STANDARD 11)
-target_include_directories(crn
+add_library("${PROJECT_NAME}" ${CRNLIB_SRCS})
+set_property(TARGET "${PROJECT_NAME}" PROPERTY CXX_STANDARD 11)
+target_include_directories("${PROJECT_NAME}"
     PUBLIC
         $<BUILD_INTERFACE:${CMAKE_CURRENT_BINARY_DIR}>
-        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../inc>
         $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
-    # PRIVATE
         $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
 )
-target_link_libraries(crn
+target_link_libraries("${PROJECT_NAME}"
     PRIVATE
         $<BUILD_INTERFACE:lzma>
         $<BUILD_INTERFACE:jpeg-compressor>
@@ -177,19 +175,35 @@ target_link_libraries(crn
 )
 
 include(GenerateExportHeader)
-generate_export_header(crn)
+generate_export_header("${PROJECT_NAME}"
+    BASE_NAME crn
+)
 
 if(NOT WIN32)
     find_package(Threads)
-    target_link_libraries(crn PUBLIC Threads::Threads)
+    target_link_libraries("${PROJECT_NAME}" PUBLIC Threads::Threads)
 endif()
 
-install(TARGETS crn EXPORT crnTargets)
-install(EXPORT crnTargets
-    FILE crunchTargets.cmake
+include(CMakePackageConfigHelpers)
+
+install(TARGETS "${PROJECT_NAME}" EXPORT "${PROJECT_NAME}-targets")
+
+install(EXPORT "${PROJECT_NAME}-targets"
     NAMESPACE crunch::
-    DESTINATION lib/cmake/crunch
+    DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}"
 )
-file(GLOB CRN_INC_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/../inc/*.h)
+
+configure_file("${CMAKE_CURRENT_SOURCE_DIR}/../cmake/config.cmake.in"
+		       "${PROJECT_NAME}Config.cmake" @ONLY)
+
+write_basic_package_version_file(
+		"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
+		COMPATIBILITY SameMajorVersion)
+
+install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Config.cmake"
+		"${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}ConfigVersion.cmake"
+		DESTINATION "${CMAKE_INSTALL_LIBDIR}/cmake/${PROJECT_NAME}")
+
+file(GLOB CRN_INC_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/*.h)
 list(APPEND CRN_INC_HEADERS ${CMAKE_CURRENT_BINARY_DIR}/crn_export.h)
-install(FILES ${CRN_INC_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR})
+install(FILES ${CRN_INC_HEADERS} DESTINATION "${CMAKE_INSTALL_INCLUDEDIR}/crunch")
diff --git a/inc/crn_decomp.h b/crnlib/crn_decomp.h
similarity index 100%
rename from inc/crn_decomp.h
rename to crnlib/crn_decomp.h
diff --git a/inc/crn_defs.h b/crnlib/crn_defs.h
similarity index 100%
rename from inc/crn_defs.h
rename to crnlib/crn_defs.h
diff --git a/crnlib/crn_mipmapped_texture.cpp b/crnlib/crn_mipmapped_texture.cpp
index f89ecba..46597c8 100644
--- a/crnlib/crn_mipmapped_texture.cpp
+++ b/crnlib/crn_mipmapped_texture.cpp
@@ -22,6 +22,7 @@
  */
 
 #include "crn_core.h"
+#include "crn_defs.h"
 #include "crn_mipmapped_texture.h"
 #include "crn_cfile_stream.h"
 #include "crn_image_utils.h"
@@ -29,8 +30,6 @@
 #include "crn_texture_comp.h"
 #include "crn_ktx_texture.h"
 
-#include "../inc/crn_defs.h"
-
 namespace crnlib {
 const vec2I g_vertical_cross_image_offsets[6] = {vec2I(2, 1), vec2I(0, 1), vec2I(1, 0), vec2I(1, 2), vec2I(1, 1), vec2I(1, 3)};
 
diff --git a/crnlib/crn_mipmapped_texture.h b/crnlib/crn_mipmapped_texture.h
index 2a3cdd1..061dc27 100644
--- a/crnlib/crn_mipmapped_texture.h
+++ b/crnlib/crn_mipmapped_texture.h
@@ -24,7 +24,6 @@
 #pragma once
 
 #include "crn_dxt_image.h"
-#include "../inc/dds_defs.h"
 #include "crn_pixel_format.h"
 #include "crn_image.h"
 #include "crn_resampler.h"
@@ -34,6 +33,7 @@
 #include "crn_texture_file_types.h"
 #include "crn_image_utils.h"
 #include "crn_export.h"
+#include "dds_defs.h"
 
 namespace crnlib {
 extern const vec2I g_vertical_cross_image_offsets[6];
diff --git a/inc/crnlib.h b/crnlib/crnlib.h
similarity index 100%
rename from inc/crnlib.h
rename to crnlib/crnlib.h
diff --git a/inc/dds_defs.h b/crnlib/dds_defs.h
similarity index 100%
rename from inc/dds_defs.h
rename to crnlib/dds_defs.h
diff --git a/crunch/CMakeLists.txt b/crunch/CMakeLists.txt
index a7e9e32..be7bedd 100644
--- a/crunch/CMakeLists.txt
+++ b/crunch/CMakeLists.txt
@@ -8,6 +8,6 @@ set(CRUNCH_SRCS
 
 add_executable(crunch ${CRUNCH_SRCS})
 set_property(TARGET crunch PROPERTY CXX_STANDARD 11)
-target_link_libraries(crunch crn)
+target_link_libraries(crunch crunch2)
 
 install(TARGETS crunch)
