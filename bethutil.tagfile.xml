<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.13.2" doxygen_gitid="26342b775ea25e6fefb53220926b20702c56fcb3">
  <compound kind="file">
    <name>index.doxy</name>
    <filename>index_8doxy.html</filename>
  </compound>
  <compound kind="file">
    <name>archive.hpp</name>
    <filename>archive_8hpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="yes" import="no" module="no" objc="no">btu/common/error.hpp</includes>
    <includes id="metaprogramming_8hpp" name="metaprogramming.hpp" local="yes" import="no" module="no" objc="no">btu/common/metaprogramming.hpp</includes>
    <includes id="path_8hpp" name="path.hpp" local="yes" import="no" module="no" objc="no">btu/common/path.hpp</includes>
    <class kind="class">btu::bsa::File</class>
    <class kind="class">btu::bsa::Archive</class>
    <namespace>btu</namespace>
    <namespace>btu::bsa</namespace>
  </compound>
  <compound kind="file">
    <name>error_code.hpp</name>
    <filename>bsa_2error__code_8hpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="no" import="no" module="no" objc="no">btu/common/error.hpp</includes>
    <class kind="struct">std::is_error_code_enum&lt; btu::bsa::BsaErr &gt;</class>
    <class kind="struct">btu::bsa::BsaErrCategory</class>
    <class kind="struct">std::is_error_condition_enum&lt; btu::bsa::FailureSource &gt;</class>
    <class kind="class">btu::bsa::FailureSourceCategory</class>
    <class kind="struct">btu::bsa::Error</class>
    <namespace>btu</namespace>
    <namespace>btu::bsa</namespace>
  </compound>
  <compound kind="file">
    <name>error_code.hpp</name>
    <filename>esp_2error__code_8hpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="no" import="no" module="no" objc="no">btu/common/error.hpp</includes>
    <class kind="struct">std::is_error_code_enum&lt; btu::esp::EspErr &gt;</class>
    <class kind="struct">btu::esp::EspErrCategory</class>
    <class kind="struct">std::is_error_condition_enum&lt; btu::esp::FailureSource &gt;</class>
    <class kind="class">btu::esp::FailureSourceCategory</class>
    <class kind="struct">btu::esp::Error</class>
    <namespace>btu</namespace>
    <namespace>btu::esp</namespace>
  </compound>
  <compound kind="file">
    <name>error_code.hpp</name>
    <filename>hkx_2error__code_8hpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="no" import="no" module="no" objc="no">btu/common/error.hpp</includes>
    <class kind="struct">std::is_error_code_enum&lt; btu::hkx::AnimErr &gt;</class>
    <class kind="struct">btu::hkx::AnimErrCategory</class>
    <class kind="struct">std::is_error_condition_enum&lt; btu::hkx::FailureSource &gt;</class>
    <class kind="class">btu::hkx::FailureSourceCategory</class>
    <namespace>btu</namespace>
    <namespace>btu::hkx</namespace>
  </compound>
  <compound kind="file">
    <name>error_code.hpp</name>
    <filename>tex_2error__code_8hpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="no" import="no" module="no" objc="no">btu/common/error.hpp</includes>
    <class kind="struct">std::is_error_code_enum&lt; btu::tex::TextureErr &gt;</class>
    <class kind="struct">btu::tex::TextureErrCategory</class>
    <class kind="struct">std::is_error_condition_enum&lt; btu::tex::FailureSource &gt;</class>
    <class kind="class">btu::tex::FailureSourceCategory</class>
    <class kind="struct">btu::tex::Error</class>
    <namespace>btu</namespace>
    <namespace>btu::tex</namespace>
  </compound>
  <compound kind="file">
    <name>pack.hpp</name>
    <filename>pack_8hpp.html</filename>
    <includes id="settings_8hpp" name="settings.hpp" local="no" import="no" module="no" objc="no">btu/bsa/settings.hpp</includes>
    <class kind="struct">btu::bsa::PackSettings</class>
    <namespace>btu</namespace>
    <namespace>btu::bsa</namespace>
  </compound>
  <compound kind="file">
    <name>plugin.hpp</name>
    <filename>plugin_8hpp.html</filename>
    <includes id="settings_8hpp" name="settings.hpp" local="yes" import="no" module="no" objc="no">btu/bsa/settings.hpp</includes>
    <namespace>btu</namespace>
    <namespace>btu::bsa</namespace>
  </compound>
  <compound kind="file">
    <name>settings.hpp</name>
    <filename>settings_8hpp.html</filename>
    <includes id="archive_8hpp" name="archive.hpp" local="yes" import="no" module="no" objc="no">btu/bsa/archive.hpp</includes>
    <includes id="algorithms_8hpp" name="algorithms.hpp" local="yes" import="no" module="no" objc="no">btu/common/algorithms.hpp</includes>
    <includes id="games_8hpp" name="games.hpp" local="yes" import="no" module="no" objc="no">btu/common/games.hpp</includes>
    <includes id="metaprogramming_8hpp" name="metaprogramming.hpp" local="yes" import="no" module="no" objc="no">btu/common/metaprogramming.hpp</includes>
    <includes id="json_8hpp" name="json.hpp" local="no" import="no" module="no" objc="no">btu/common/json.hpp</includes>
    <class kind="struct">btu::bsa::AllowedPath</class>
    <namespace>btu</namespace>
    <namespace>btu::bsa</namespace>
    <namespace>btu::bsa::dummy</namespace>
  </compound>
  <compound kind="file">
    <name>unpack.hpp</name>
    <filename>unpack_8hpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="no" import="no" module="no" objc="no">btu/common/error.hpp</includes>
    <includes id="filesystem_8hpp" name="filesystem.hpp" local="no" import="no" module="no" objc="no">btu/common/filesystem.hpp</includes>
    <class kind="struct">btu::bsa::UnpackSettings</class>
    <namespace>btu</namespace>
    <namespace>btu::bsa</namespace>
  </compound>
  <compound kind="file">
    <name>algorithms.hpp</name>
    <filename>algorithms_8hpp.html</filename>
    <namespace>btu</namespace>
    <namespace>btu::common</namespace>
  </compound>
  <compound kind="file">
    <name>error.hpp</name>
    <filename>error_8hpp.html</filename>
    <class kind="struct">btu::common::Error</class>
    <class kind="class">btu::common::Exception</class>
    <namespace>btu</namespace>
    <namespace>btu::common</namespace>
  </compound>
  <compound kind="file">
    <name>filesystem.hpp</name>
    <filename>filesystem_8hpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="no" import="no" module="no" objc="no">btu/common/error.hpp</includes>
    <includes id="path_8hpp" name="path.hpp" local="no" import="no" module="no" objc="no">btu/common/path.hpp</includes>
    <namespace>btu</namespace>
    <namespace>btu::common</namespace>
  </compound>
  <compound kind="file">
    <name>functional.hpp</name>
    <filename>common_2functional_8hpp.html</filename>
    <class kind="struct">btu::common::detail::bind_back_fn_</class>
    <class kind="struct">btu::common::detail::bind_back_fn</class>
    <class kind="class">btu::common::Lazy</class>
    <namespace>btu</namespace>
    <namespace>btu::common</namespace>
    <namespace>btu::common::detail</namespace>
    <concept>btu::common::invocable_l_or_r</concept>
    <member kind="define">
      <type>#define</type>
      <name>BTU_RETURNS</name>
      <anchorfile>common_2functional_8hpp.html</anchorfile>
      <anchor>a7da778a710610239d3aa7352a3a63c83</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BTU_RESOLVE_OVERLOAD</name>
      <anchorfile>common_2functional_8hpp.html</anchorfile>
      <anchor>ab2f78c4f46fa083ba1a87cadaa91658a</anchor>
      <arglist>(f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>functional.hpp</name>
    <filename>tex_2detail_2functional_8hpp.html</filename>
  </compound>
  <compound kind="file">
    <name>games.hpp</name>
    <filename>games_8hpp.html</filename>
    <includes id="json_8hpp" name="json.hpp" local="no" import="no" module="no" objc="no">btu/common/json.hpp</includes>
    <namespace>btu</namespace>
  </compound>
  <compound kind="file">
    <name>json.hpp</name>
    <path>btu/common/</path>
    <filename>json_8hpp.html</filename>
    <includes id="string_8hpp" name="string.hpp" local="no" import="no" module="no" objc="no">btu/common/string.hpp</includes>
    <class kind="struct">detail::variant_switch</class>
    <class kind="struct">detail::variant_switch&lt; 0 &gt;</class>
    <class kind="struct">nlohmann::adl_serializer&lt; std::optional&lt; T &gt; &gt;</class>
    <class kind="struct">nlohmann::adl_serializer&lt; std::variant&lt; Args... &gt; &gt;</class>
    <class kind="struct">nlohmann::adl_serializer&lt; std::monostate &gt;</class>
    <namespace>detail</namespace>
    <namespace>nlohmann</namespace>
  </compound>
  <compound kind="file">
    <name>metaprogramming.hpp</name>
    <path>btu/common/</path>
    <filename>metaprogramming_8hpp.html</filename>
    <class kind="struct">btu::common::Overload</class>
    <class kind="struct">btu::common::is_variant_member&lt; T, std::variant&lt; Ts... &gt; &gt;</class>
    <class kind="struct">btu::common::is_mutable_lambda_helper</class>
    <class kind="struct">btu::common::is_mutable_lambda_helper&lt; Ret(Class::*)(Args...) const &gt;</class>
    <class kind="struct">btu::common::is_mutable_lambda_helper&lt; Ret(Class::*)(Args...)&gt;</class>
    <class kind="struct">btu::common::is_mutable_lambda</class>
    <namespace>btu</namespace>
    <namespace>btu::common</namespace>
    <member kind="define">
      <type>#define</type>
      <name>BETHUTIL_MAKE_ENUM_OPERATOR_PAIR</name>
      <anchorfile>metaprogramming_8hpp.html</anchorfile>
      <anchor>ace6d46cc5ad0f93c51f403e50f77146d</anchor>
      <arglist>(a_type, a_op)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BETHUTIL_MAKE_ALL_ENUM_OPERATORS</name>
      <anchorfile>metaprogramming_8hpp.html</anchorfile>
      <anchor>a043a9aa5cd3f8bd06e9d5d41a16000e0</anchor>
      <arglist>(a_type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BTU_FWD</name>
      <anchorfile>metaprogramming_8hpp.html</anchorfile>
      <anchor>a1ac521e0c28017c81fb6351d85e1ad81</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>BTU_MOV</name>
      <anchorfile>metaprogramming_8hpp.html</anchorfile>
      <anchor>aa6842c7207cda45b4bfebc41c232d309</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>path.hpp</name>
    <path>btu/common/</path>
    <filename>path_8hpp.html</filename>
    <includes id="string_8hpp" name="string.hpp" local="yes" import="no" module="no" objc="no">string.hpp</includes>
    <namespace>btu</namespace>
    <namespace>btu::common</namespace>
  </compound>
  <compound kind="file">
    <name>string.hpp</name>
    <path>btu/common/</path>
    <filename>string_8hpp.html</filename>
    <includes id="metaprogramming_8hpp" name="metaprogramming.hpp" local="yes" import="no" module="no" objc="no">btu/common/metaprogramming.hpp</includes>
    <class kind="class">btu::common::UTF8Iterator</class>
    <class kind="class">btu::common::InvalidUTF8</class>
    <class kind="struct">btu::common::Cards</class>
    <namespace>btu</namespace>
    <namespace>btu::common</namespace>
    <namespace>btu::common::detail</namespace>
  </compound>
  <compound kind="file">
    <name>threading.hpp</name>
    <path>btu/common/</path>
    <filename>threading_8hpp.html</filename>
    <includes id="common_2functional_8hpp" name="functional.hpp" local="no" import="no" module="no" objc="no">btu/common/functional.hpp</includes>
    <includes id="metaprogramming_8hpp" name="metaprogramming.hpp" local="no" import="no" module="no" objc="no">btu/common/metaprogramming.hpp</includes>
    <class kind="class">btu::common::update_guard</class>
    <class kind="class">btu::common::synchronized</class>
    <namespace>btu</namespace>
    <namespace>btu::common</namespace>
    <concept>btu::common::basic_lockable</concept>
  </compound>
  <compound kind="file">
    <name>functions.hpp</name>
    <path>btu/esp/</path>
    <filename>esp_2functions_8hpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="no" import="no" module="no" objc="no">btu/common/error.hpp</includes>
    <includes id="path_8hpp" name="path.hpp" local="no" import="no" module="no" objc="no">btu/common/path.hpp</includes>
    <class kind="struct">btu::esp::detail::RecordHeader</class>
    <class kind="union">btu::esp::detail::PluginRecordHeader</class>
    <class kind="struct">btu::esp::detail::PluginFieldHeader</class>
    <namespace>btu</namespace>
    <namespace>btu::esp</namespace>
    <namespace>btu::esp::detail</namespace>
    <member kind="define">
      <type>#define</type>
      <name>PACKED</name>
      <anchorfile>esp_2functions_8hpp.html</anchorfile>
      <anchor>a49db38da1996bbc2acc1311a7dc939bf</anchor>
      <arglist>(datastructure)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>functions.hpp</name>
    <path>btu/nif/</path>
    <filename>nif_2functions_8hpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="yes" import="no" module="no" objc="no">btu/common/error.hpp</includes>
    <includes id="games_8hpp" name="games.hpp" local="yes" import="no" module="no" objc="no">btu/common/games.hpp</includes>
    <includes id="mesh_8hpp" name="mesh.hpp" local="yes" import="no" module="no" objc="no">btu/nif/mesh.hpp</includes>
    <namespace>btu</namespace>
    <namespace>btu::nif</namespace>
  </compound>
  <compound kind="file">
    <name>functions.hpp</name>
    <path>btu/tex/</path>
    <filename>tex_2functions_8hpp.html</filename>
    <includes id="tex_2detail_2common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">btu/tex/detail/common.hpp</includes>
    <includes id="formats__string_8hpp" name="formats_string.hpp" local="yes" import="no" module="no" objc="no">btu/tex/detail/formats_string.hpp</includes>
    <includes id="dimension_8hpp" name="dimension.hpp" local="yes" import="no" module="no" objc="no">btu/tex/dimension.hpp</includes>
    <includes id="texture_8hpp" name="texture.hpp" local="yes" import="no" module="no" objc="no">btu/tex/texture.hpp</includes>
    <includes id="compression__device_8hpp" name="compression_device.hpp" local="no" import="no" module="no" objc="no">btu/tex/compression_device.hpp</includes>
    <namespace>btu</namespace>
    <namespace>btu::tex</namespace>
  </compound>
  <compound kind="file">
    <name>anim.hpp</name>
    <path>btu/hkx/</path>
    <filename>anim_8hpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="no" import="no" module="no" objc="no">btu/common/error.hpp</includes>
    <includes id="games_8hpp" name="games.hpp" local="no" import="no" module="no" objc="no">btu/common/games.hpp</includes>
    <includes id="path_8hpp" name="path.hpp" local="no" import="no" module="no" objc="no">btu/common/path.hpp</includes>
    <class kind="class">btu::hkx::detail::AnimExeInfo</class>
    <class kind="class">btu::hkx::AnimExe</class>
    <class kind="struct">btu::hkx::Error</class>
    <namespace>btu</namespace>
    <namespace>btu::hkx</namespace>
    <namespace>btu::hkx::detail</namespace>
  </compound>
  <compound kind="file">
    <name>mod_folder.hpp</name>
    <path>btu/modmanager/</path>
    <filename>mod__folder_8hpp.html</filename>
    <includes id="archive_8hpp" name="archive.hpp" local="no" import="no" module="no" objc="no">btu/bsa/archive.hpp</includes>
    <includes id="settings_8hpp" name="settings.hpp" local="no" import="no" module="no" objc="no">btu/bsa/settings.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="no" import="no" module="no" objc="no">btu/common/error.hpp</includes>
    <includes id="common_2functional_8hpp" name="functional.hpp" local="no" import="no" module="no" objc="no">btu/common/functional.hpp</includes>
    <includes id="path_8hpp" name="path.hpp" local="no" import="no" module="no" objc="no">btu/common/path.hpp</includes>
    <includes id="threading_8hpp" name="threading.hpp" local="no" import="no" module="no" objc="no">btu/common/threading.hpp</includes>
    <class kind="struct">btu::modmanager::ModFile</class>
    <class kind="class">btu::modmanager::ModFolderIteratorBase</class>
    <class kind="class">btu::modmanager::ModFolderTransformer</class>
    <class kind="class">btu::modmanager::ModFolderIterator</class>
    <class kind="class">btu::modmanager::ModFolder</class>
    <namespace>btu</namespace>
    <namespace>btu::modmanager</namespace>
  </compound>
  <compound kind="file">
    <name>mod_manager.hpp</name>
    <path>btu/modmanager/</path>
    <filename>mod__manager_8hpp.html</filename>
    <includes id="mod__folder_8hpp" name="mod_folder.hpp" local="yes" import="no" module="no" objc="no">btu/modmanager/mod_folder.hpp</includes>
    <namespace>btu</namespace>
    <namespace>btu::modmanager</namespace>
  </compound>
  <compound kind="file">
    <name>common.hpp</name>
    <path>btu/nif/detail/</path>
    <filename>nif_2detail_2common_8hpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="yes" import="no" module="no" objc="no">btu/common/error.hpp</includes>
    <includes id="path_8hpp" name="path.hpp" local="yes" import="no" module="no" objc="no">btu/common/path.hpp</includes>
    <namespace>btu</namespace>
    <namespace>btu::nif</namespace>
  </compound>
  <compound kind="file">
    <name>common.hpp</name>
    <path>btu/tex/detail/</path>
    <filename>tex_2detail_2common_8hpp.html</filename>
    <includes id="tex_2error__code_8hpp" name="error_code.hpp" local="yes" import="no" module="no" objc="no">btu/tex/error_code.hpp</includes>
    <namespace>btu</namespace>
    <namespace>btu::tex</namespace>
  </compound>
  <compound kind="file">
    <name>mesh.hpp</name>
    <path>btu/nif/</path>
    <filename>mesh_8hpp.html</filename>
    <includes id="error_8hpp" name="error.hpp" local="yes" import="no" module="no" objc="no">btu/common/error.hpp</includes>
    <includes id="path_8hpp" name="path.hpp" local="yes" import="no" module="no" objc="no">btu/common/path.hpp</includes>
    <includes id="nif_2detail_2common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">btu/nif/detail/common.hpp</includes>
    <class kind="class">btu::nif::Mesh</class>
    <namespace>btu</namespace>
    <namespace>btu::nif</namespace>
  </compound>
  <compound kind="file">
    <name>optimize.hpp</name>
    <path>btu/nif/</path>
    <filename>nif_2optimize_8hpp.html</filename>
    <includes id="games_8hpp" name="games.hpp" local="yes" import="no" module="no" objc="no">btu/common/games.hpp</includes>
    <includes id="nif_2detail_2common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">btu/nif/detail/common.hpp</includes>
    <includes id="json_8hpp" name="json.hpp" local="no" import="no" module="no" objc="no">btu/common/json.hpp</includes>
    <class kind="struct">btu::nif::Settings</class>
    <namespace>btu</namespace>
    <namespace>btu::nif</namespace>
  </compound>
  <compound kind="file">
    <name>optimize.hpp</name>
    <path>btu/tex/</path>
    <filename>tex_2optimize_8hpp.html</filename>
    <includes id="tex_2detail_2common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">btu/tex/detail/common.hpp</includes>
    <includes id="dimension_8hpp" name="dimension.hpp" local="yes" import="no" module="no" objc="no">btu/tex/dimension.hpp</includes>
    <includes id="formats_8hpp" name="formats.hpp" local="yes" import="no" module="no" objc="no">btu/tex/formats.hpp</includes>
    <includes id="compression__device_8hpp" name="compression_device.hpp" local="yes" import="no" module="no" objc="no">compression_device.hpp</includes>
    <includes id="games_8hpp" name="games.hpp" local="no" import="no" module="no" objc="no">btu/common/games.hpp</includes>
    <includes id="json_8hpp" name="json.hpp" local="no" import="no" module="no" objc="no">btu/common/json.hpp</includes>
    <class kind="struct">btu::tex::Settings</class>
    <namespace>btu</namespace>
    <namespace>btu::tex</namespace>
  </compound>
  <compound kind="file">
    <name>compression_device.hpp</name>
    <path>btu/tex/</path>
    <filename>compression__device_8hpp.html</filename>
    <includes id="threading_8hpp" name="threading.hpp" local="no" import="no" module="no" objc="no">btu/common/threading.hpp</includes>
    <class kind="class">btu::tex::CompressionDevice</class>
    <class kind="struct">btu::tex::CompressionDevice::AdapterInfo</class>
    <namespace>btu</namespace>
    <namespace>btu::tex</namespace>
    <namespace>btu::tex::detail</namespace>
  </compound>
  <compound kind="file">
    <name>crunch_functions.hpp</name>
    <path>btu/tex/</path>
    <filename>crunch__functions_8hpp.html</filename>
    <includes id="crunch__texture_8hpp" name="crunch_texture.hpp" local="yes" import="no" module="no" objc="no">btu/tex/crunch_texture.hpp</includes>
    <includes id="tex_2detail_2common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">btu/tex/detail/common.hpp</includes>
    <includes id="formats__string_8hpp" name="formats_string.hpp" local="yes" import="no" module="no" objc="no">btu/tex/detail/formats_string.hpp</includes>
    <includes id="dimension_8hpp" name="dimension.hpp" local="yes" import="no" module="no" objc="no">btu/tex/dimension.hpp</includes>
    <namespace>btu</namespace>
    <namespace>btu::tex</namespace>
  </compound>
  <compound kind="file">
    <name>crunch_texture.hpp</name>
    <path>btu/tex/</path>
    <filename>crunch__texture_8hpp.html</filename>
    <includes id="path_8hpp" name="path.hpp" local="no" import="no" module="no" objc="no">btu/common/path.hpp</includes>
    <includes id="tex_2detail_2common_8hpp" name="common.hpp" local="no" import="no" module="no" objc="no">btu/tex/detail/common.hpp</includes>
    <includes id="dxtex_8hpp" name="dxtex.hpp" local="no" import="no" module="no" objc="no">btu/tex/dxtex.hpp</includes>
    <class kind="class">btu::tex::CrunchTexture</class>
    <namespace>crnlib</namespace>
    <namespace>btu</namespace>
    <namespace>btu::tex</namespace>
  </compound>
  <compound kind="file">
    <name>formats_string.hpp</name>
    <path>btu/tex/detail/</path>
    <filename>formats__string_8hpp.html</filename>
    <includes id="json_8hpp" name="json.hpp" local="no" import="no" module="no" objc="no">btu/common/json.hpp</includes>
    <includes id="dxtex_8hpp" name="dxtex.hpp" local="no" import="no" module="no" objc="no">btu/tex/dxtex.hpp</includes>
    <class kind="struct">btu::tex::detail::StringFormat</class>
    <class kind="struct">nlohmann::adl_serializer&lt; DXGI_FORMAT &gt;</class>
    <namespace>btu</namespace>
    <namespace>btu::tex</namespace>
    <namespace>btu::tex::detail</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DEFFMT</name>
      <anchorfile>formats__string_8hpp.html</anchorfile>
      <anchor>a6cdd68db651a13cb70aec8abac82d6fa</anchor>
      <arglist>(fmt)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>windows.hpp</name>
    <path>btu/tex/detail/</path>
    <filename>windows_8hpp.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>WIN32_LEAN_AND_MEAN</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>ac7bef5d85e3dcd73eef56ad39ffc84a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOGDICAPMASKS</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a8effd0655f96cc25e57c0b348669df7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOVIRTUALKEYCODES</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>ac5ff788cb8638ce5daf99e586083eef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOWINMESSAGES</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a90d30d395de13a4f31a42b4066cfbb68</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOWINSTYLES</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a22c56a31990574a86b40f60b6073cdba</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOSYSMETRICS</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>aea709a8ba0a7d510cefcf625fdb3b4b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOMENUS</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a15dd7444df67d292b83dc869d6e4b417</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOICONS</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a8b8c544b2e9e3359de25f7d89f4f5de9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOKEYSTATES</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a6f4a8b3fe02f55fd022b91b3a965e15c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOSYSCOMMANDS</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a271ce221dc9c5c8887d443008b3d718c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NORASTEROPS</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a0293d1b2742d9c9ef401d75a55b81859</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOSHOWWINDOW</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>ab2dcc39e73a373330467f5f503c779d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>OEMRESOURCE</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a3a75770af38d05856eb2e9d1867b471c</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOATOM</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>aa59dc3d2c7dc2ec85638761aeb2d50f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOCLIPBOARD</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a2e4c78354db40d44bea894e472550c11</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOCOLOR</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>ad99d89815bdc61acfe8744c41c96e637</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOCTLMGR</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a679a4dcdfeb97910576cff8452efb28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NODRAWTEXT</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a5ceb8b3e84824f87cae315091546e67f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOGDI</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a2bedaca1c6ca66de2397772910fbe140</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOKERNEL</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a1381fe81f9874aa4a669b6bd556f87fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOUSER</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a73886ff6a915a4a92e3ade13eba71f6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NONLS</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a52be9abe7ca69b513aa7e975284d4f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOMB</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a8bd3112472ae1e33be8faf5294230948</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOMEMMGR</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a8b2f514658ba28ae0ea3b8b96edf520e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOMETAFILE</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a37618c72c08b2464576612b2ac595b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOMINMAX</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a9f918755b601cf4bffca775992e6fb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOOPENFILE</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a2d7186e4a6dfcc0011461ce1e8b70a05</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOSCROLL</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a06f62f70cab65b4c19972202f784e12d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOSERVICE</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a14ac98af6281e748377693d824e41ca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOSOUND</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>af40cddcc88a6ebeed4f75d4bbbed195e</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOTEXTMETRIC</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a7d6ea5ce712ed1d05533cf8ebf38d880</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOWH</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>aac388bb1bd11a9a15b594321658ae233</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOWINOFFSETS</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a964a6e23899e4f0b1886d86b1981545d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOCOMM</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a2ee511fa2fd29a9a1f0efbcb2c364b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOKANJI</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a0958eca070bb77eddff0a604acda46f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOHELP</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a34c6896a3b5f4079b3539fb8118be1d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOPROFILER</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>af883320ccbc88fe5ff2d8733ec0a034f</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NODEFERWINDOWPOS</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a348ad07df4aceda9097d9497b78bccd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>NOMCX</name>
      <anchorfile>windows_8hpp.html</anchorfile>
      <anchor>a256fe1caeb996b1142c3eb51097fef0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dimension.hpp</name>
    <path>btu/tex/</path>
    <filename>dimension_8hpp.html</filename>
    <includes id="tex_2detail_2common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">btu/tex/detail/common.hpp</includes>
    <includes id="formats__string_8hpp" name="formats_string.hpp" local="yes" import="no" module="no" objc="no">btu/tex/detail/formats_string.hpp</includes>
    <includes id="json_8hpp" name="json.hpp" local="no" import="no" module="no" objc="no">btu/common/json.hpp</includes>
    <class kind="struct">btu::tex::Dimension</class>
    <namespace>btu</namespace>
    <namespace>btu::tex</namespace>
  </compound>
  <compound kind="file">
    <name>dxtex.hpp</name>
    <path>btu/tex/</path>
    <filename>dxtex_8hpp.html</filename>
    <includes id="windows_8hpp" name="windows.hpp" local="no" import="no" module="no" objc="no">btu/tex/detail/windows.hpp</includes>
    <member kind="define">
      <type>#define</type>
      <name>PAL_STDCPP_COMPAT</name>
      <anchorfile>dxtex_8hpp.html</anchorfile>
      <anchor>a99782612d36243b59ee8e560c2460864</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>formats.hpp</name>
    <path>btu/tex/</path>
    <filename>formats_8hpp.html</filename>
    <includes id="json_8hpp" name="json.hpp" local="no" import="no" module="no" objc="no">btu/common/json.hpp</includes>
    <includes id="dxtex_8hpp" name="dxtex.hpp" local="no" import="no" module="no" objc="no">btu/tex/dxtex.hpp</includes>
    <class kind="struct">btu::tex::BestFormatFor</class>
    <class kind="struct">btu::tex::GuessBestFormatArgs</class>
    <namespace>btu</namespace>
    <namespace>btu::tex</namespace>
  </compound>
  <compound kind="file">
    <name>texture.hpp</name>
    <path>btu/tex/</path>
    <filename>texture_8hpp.html</filename>
    <includes id="path_8hpp" name="path.hpp" local="yes" import="no" module="no" objc="no">btu/common/path.hpp</includes>
    <includes id="tex_2detail_2common_8hpp" name="common.hpp" local="yes" import="no" module="no" objc="no">btu/tex/detail/common.hpp</includes>
    <class kind="class">btu::tex::Texture</class>
    <namespace>DirectX</namespace>
    <namespace>btu</namespace>
    <namespace>btu::tex</namespace>
  </compound>
  <compound kind="struct">
    <name>btu::tex::CompressionDevice::AdapterInfo</name>
    <filename>structbtu_1_1tex_1_1_compression_device_1_1_adapter_info.html</filename>
    <member kind="variable">
      <type>uint32_t</type>
      <name>index</name>
      <anchorfile>structbtu_1_1tex_1_1_compression_device_1_1_adapter_info.html</anchorfile>
      <anchor>a42e138873b2fb2c62238a1ea1359d072</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::u8string</type>
      <name>name</name>
      <anchorfile>structbtu_1_1tex_1_1_compression_device_1_1_adapter_info.html</anchorfile>
      <anchor>a90450832cd1a28ab7130894ae23305b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>nlohmann::adl_serializer&lt; DXGI_FORMAT &gt;</name>
    <filename>structnlohmann_1_1adl__serializer_3_01_d_x_g_i___f_o_r_m_a_t_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_json</name>
      <anchorfile>structnlohmann_1_1adl__serializer_3_01_d_x_g_i___f_o_r_m_a_t_01_4.html</anchorfile>
      <anchor>a1526766dfef1b86721c2a6a1aabe5e61</anchor>
      <arglist>(json &amp;j, const DXGI_FORMAT &amp;format)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>from_json</name>
      <anchorfile>structnlohmann_1_1adl__serializer_3_01_d_x_g_i___f_o_r_m_a_t_01_4.html</anchorfile>
      <anchor>aa904021800fc110b0bddea64a7dadea9</anchor>
      <arglist>(const json &amp;j, DXGI_FORMAT &amp;format)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>nlohmann::adl_serializer&lt; std::monostate &gt;</name>
    <filename>structnlohmann_1_1adl__serializer_3_01std_1_1monostate_01_4.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_json</name>
      <anchorfile>structnlohmann_1_1adl__serializer_3_01std_1_1monostate_01_4.html</anchorfile>
      <anchor>ae28d7546e1e0caec0868563bd610cfd9</anchor>
      <arglist>(json &amp;j, std::monostate const &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>from_json</name>
      <anchorfile>structnlohmann_1_1adl__serializer_3_01std_1_1monostate_01_4.html</anchorfile>
      <anchor>a80671e7ca977853385be02462ffe9e58</anchor>
      <arglist>(json const &amp;j, std::monostate &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>nlohmann::adl_serializer&lt; std::optional&lt; T &gt; &gt;</name>
    <filename>structnlohmann_1_1adl__serializer_3_01std_1_1optional_3_01_t_01_4_01_4.html</filename>
    <templarg>typename T</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_json</name>
      <anchorfile>structnlohmann_1_1adl__serializer_3_01std_1_1optional_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>a09ba0101fa2f4ca8748b0e6b70937945</anchor>
      <arglist>(json &amp;j, const std::optional&lt; T &gt; &amp;opt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>from_json</name>
      <anchorfile>structnlohmann_1_1adl__serializer_3_01std_1_1optional_3_01_t_01_4_01_4.html</anchorfile>
      <anchor>af4203029ef3de16b53c7b88fcdf4d4fe</anchor>
      <arglist>(const json &amp;j, std::optional&lt; T &gt; &amp;opt)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>nlohmann::adl_serializer&lt; std::variant&lt; Args... &gt; &gt;</name>
    <filename>structnlohmann_1_1adl__serializer_3_01std_1_1variant_3_01_args_8_8_8_01_4_01_4.html</filename>
    <templarg>typename... Args</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>to_json</name>
      <anchorfile>structnlohmann_1_1adl__serializer_3_01std_1_1variant_3_01_args_8_8_8_01_4_01_4.html</anchorfile>
      <anchor>acf4d94350a6f951c14285c65d5b90cbe</anchor>
      <arglist>(json &amp;j, std::variant&lt; Args... &gt; const &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>from_json</name>
      <anchorfile>structnlohmann_1_1adl__serializer_3_01std_1_1variant_3_01_args_8_8_8_01_4_01_4.html</anchorfile>
      <anchor>aa560d68adf5a59fbfb1b5f206095b4f8</anchor>
      <arglist>(json const &amp;j, std::variant&lt; Args... &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::bsa::AllowedPath</name>
    <filename>structbtu_1_1bsa_1_1_allowed_path.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>check</name>
      <anchorfile>structbtu_1_1bsa_1_1_allowed_path.html</anchorfile>
      <anchor>a2efe1170d17ae6e22e7bc763b0a57de7</anchor>
      <arglist>(const Path &amp;filepath, const Path &amp;root) const -&gt; bool</arglist>
    </member>
    <member kind="variable">
      <type>std::u8string</type>
      <name>extension</name>
      <anchorfile>structbtu_1_1bsa_1_1_allowed_path.html</anchorfile>
      <anchor>a5a9004f0901bbddfd3286cee87984a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::u8string &gt;</type>
      <name>directories</name>
      <anchorfile>structbtu_1_1bsa_1_1_allowed_path.html</anchorfile>
      <anchor>a4fe8281548fc8829bc7c12f0e19f0784</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; TES4ArchiveType &gt;</type>
      <name>tes4_archive_type</name>
      <anchorfile>structbtu_1_1bsa_1_1_allowed_path.html</anchorfile>
      <anchor>a3fa0978231094ab6893d3554010fdeaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const auto</type>
      <name>k_root</name>
      <anchorfile>structbtu_1_1bsa_1_1_allowed_path.html</anchorfile>
      <anchor>a6fb1797646d1c24522cfd5d140ea85ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::hkx::AnimErrCategory</name>
    <filename>structbtu_1_1hkx_1_1_anim_err_category.html</filename>
    <base>std::error_category</base>
    <member kind="function">
      <type>auto</type>
      <name>name</name>
      <anchorfile>structbtu_1_1hkx_1_1_anim_err_category.html</anchorfile>
      <anchor>a0228c7e5d1829c58c2742096418e1dd2</anchor>
      <arglist>() const noexcept -&gt; const char *override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>message</name>
      <anchorfile>structbtu_1_1hkx_1_1_anim_err_category.html</anchorfile>
      <anchor>a432ede4c430dd7a4838a52db706e6631</anchor>
      <arglist>(int ev) const -&gt; std::string override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::hkx::AnimExe</name>
    <filename>classbtu_1_1hkx_1_1_anim_exe.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>convert</name>
      <anchorfile>classbtu_1_1hkx_1_1_anim_exe.html</anchorfile>
      <anchor>ac70f9d5dba872aa342048c645a6d8b22</anchor>
      <arglist>(Game target_game, const Path &amp;input, const Path &amp;output) const -&gt; ResultError</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>convert</name>
      <anchorfile>classbtu_1_1hkx_1_1_anim_exe.html</anchorfile>
      <anchor>a46e2ab61e6d6ec8a7afda1b41e60cf34</anchor>
      <arglist>(Game target_game, std::span&lt; const std::byte &gt; input) const -&gt; tl::expected&lt; std::vector&lt; std::byte &gt;, Error &gt;</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>make</name>
      <anchorfile>classbtu_1_1hkx_1_1_anim_exe.html</anchorfile>
      <anchor>a4d6a3e78130d232f9d5923a9a2f07203</anchor>
      <arglist>(Path exe_dir) noexcept -&gt; tl::expected&lt; AnimExe, Error &gt;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::hkx::detail::AnimExeInfo</name>
    <filename>classbtu_1_1hkx_1_1detail_1_1_anim_exe_info.html</filename>
    <member kind="function">
      <type></type>
      <name>AnimExeInfo</name>
      <anchorfile>classbtu_1_1hkx_1_1detail_1_1_anim_exe_info.html</anchorfile>
      <anchor>a424ece219982c447784550e7bfa32c0e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnimExeInfo</name>
      <anchorfile>classbtu_1_1hkx_1_1detail_1_1_anim_exe_info.html</anchorfile>
      <anchor>a77a1b40cd2f2ebf895fea89d4b61d018</anchor>
      <arglist>(const AnimExeInfo &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AnimExeInfo</name>
      <anchorfile>classbtu_1_1hkx_1_1detail_1_1_anim_exe_info.html</anchorfile>
      <anchor>abcef02fced04d79f4a431b41c945edeb</anchor>
      <arglist>(AnimExeInfo &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>classbtu_1_1hkx_1_1detail_1_1_anim_exe_info.html</anchorfile>
      <anchor>a2ede2abab4b5a80189f36549eae82ea7</anchor>
      <arglist>(const AnimExeInfo &amp;) -&gt; AnimExeInfo &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>classbtu_1_1hkx_1_1detail_1_1_anim_exe_info.html</anchorfile>
      <anchor>ac50e3bcf52c5145e128f5b0d31c63cdd</anchor>
      <arglist>(AnimExeInfo &amp;&amp;) -&gt; AnimExeInfo &amp;=delete</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AnimExeInfo</name>
      <anchorfile>classbtu_1_1hkx_1_1detail_1_1_anim_exe_info.html</anchorfile>
      <anchor>a459fe8bb7d75f6d193346dcb1ddfade5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual constexpr auto</type>
      <name>name</name>
      <anchorfile>classbtu_1_1hkx_1_1detail_1_1_anim_exe_info.html</anchorfile>
      <anchor>ade428c34857b7c7c73d3cee21f490709</anchor>
      <arglist>() const noexcept -&gt; std::string_view=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual constexpr auto</type>
      <name>input_file_name</name>
      <anchorfile>classbtu_1_1hkx_1_1detail_1_1_anim_exe_info.html</anchorfile>
      <anchor>a948da8b4006b6869b070ed83e9696020</anchor>
      <arglist>() const noexcept -&gt; std::string_view=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual constexpr auto</type>
      <name>output_file_name</name>
      <anchorfile>classbtu_1_1hkx_1_1detail_1_1_anim_exe_info.html</anchorfile>
      <anchor>a5ee423aefe7a049cbcf43d52928f317f</anchor>
      <arglist>() const noexcept -&gt; std::string_view=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual constexpr auto</type>
      <name>target_game</name>
      <anchorfile>classbtu_1_1hkx_1_1detail_1_1_anim_exe_info.html</anchorfile>
      <anchor>a74a8db8679b0247596a5ae119d74a088</anchor>
      <arglist>() const noexcept -&gt; Game=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual auto</type>
      <name>get_required_files</name>
      <anchorfile>classbtu_1_1hkx_1_1detail_1_1_anim_exe_info.html</anchorfile>
      <anchor>a33ca08059c46039fb7672066b09a6140</anchor>
      <arglist>(const Path &amp;exe_dir) const noexcept -&gt; std::vector&lt; Path &gt;=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual auto</type>
      <name>get_full_args</name>
      <anchorfile>classbtu_1_1hkx_1_1detail_1_1_anim_exe_info.html</anchorfile>
      <anchor>aad49f51d64e2ea6ed8877b3090761fc6</anchor>
      <arglist>(const Path &amp;exe_dir) const -&gt; std::vector&lt; std::string &gt;=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual auto</type>
      <name>is_os_supported</name>
      <anchorfile>classbtu_1_1hkx_1_1detail_1_1_anim_exe_info.html</anchorfile>
      <anchor>aa89c91ff3182b152493414e3e498c9db</anchor>
      <arglist>() const noexcept -&gt; bool=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::bsa::Archive</name>
    <filename>classbtu_1_1bsa_1_1_archive.html</filename>
    <member kind="typedef">
      <type>decltype(files_)::value_type</type>
      <name>value_type</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a0183cfaaa0615a265ec24d651845bcde</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Archive</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>aecfcd2a1200549aa31d1f422d10e1ccf</anchor>
      <arglist>(ArchiveVersion ver, ArchiveType type) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Archive</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a51250a3304fca2752504f3e450633f77</anchor>
      <arglist>(const Archive &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a2a6ccbfcc914564a1bdd77b81a22a384</anchor>
      <arglist>(const Archive &amp;) -&gt; Archive &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Archive</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a06636febe0d5329edf2772d80b8e2359</anchor>
      <arglist>(Archive &amp;&amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a5751a11053516adb1d6d48630829a26c</anchor>
      <arglist>(Archive &amp;&amp;) noexcept -&gt; Archive &amp;=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Archive</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>aa57803a2fc41d5f48683ba2adb458276</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>write_tes3</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a827190a51597077b21d6a7ca30cb6757</anchor>
      <arglist>(Path path) &amp;&amp;noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>write_tes4</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>abe14261d431982cb7454b1821d4dc7ec</anchor>
      <arglist>(Path path) &amp;&amp;noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>write_fo4</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a0972d6f897a1bdea586a5c174c66698a</anchor>
      <arglist>(Path path) &amp;&amp;noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>write</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a77f20c197a241f6e166bb78ca9784d06</anchor>
      <arglist>(const Path &amp;path) &amp;&amp;noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>emplace</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>ac10591b1a5fc0f345be2e50bcca83af1</anchor>
      <arglist>(std::string name, File file) noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>begin</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a43da2270775c2e528c63cdb1796170b9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>end</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a9e6be2356a6e8f4f7dc58761c26bf70d</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>empty</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a387fb84f05afcc8f88d0ace82e52f71a</anchor>
      <arglist>() const noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a8dc4134ce7fdc1dafbb79d53da12c086</anchor>
      <arglist>() const noexcept -&gt; size_t</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>version</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>aa92cf3d33dc6d3c71c7f12832e2bdbf6</anchor>
      <arglist>() const noexcept -&gt; ArchiveVersion</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>set_version</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a82450cdf610c14c0bbc19942fe201648</anchor>
      <arglist>(ArchiveVersion version) noexcept -&gt; tl::expected&lt; void, common::Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>type</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>ae0d6bec0ae26b43fcbadccb6991cacbb</anchor>
      <arglist>() const noexcept -&gt; ArchiveType</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>file_size</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>aa4b294a7770796c77f311a3f8b7b48dd</anchor>
      <arglist>() const noexcept -&gt; size_t</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>read_tes3</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a2d0bda4203575a0f43987b1feed3a12c</anchor>
      <arglist>(Path path) noexcept -&gt; tl::expected&lt; Archive, common::Error &gt;</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>read_tes4</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>aeb21544147e75a35119ec3232c26bb87</anchor>
      <arglist>(const Path &amp;path) noexcept -&gt; tl::expected&lt; Archive, common::Error &gt;</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>read_fo4</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>aa18d090bb22c008c99c4d80c4ac443b4</anchor>
      <arglist>(Path path) noexcept -&gt; tl::expected&lt; Archive, common::Error &gt;</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>read</name>
      <anchorfile>classbtu_1_1bsa_1_1_archive.html</anchorfile>
      <anchor>a546638bb1d23113b83d15d2816ee29f5</anchor>
      <arglist>(Path path) noexcept -&gt; tl::expected&lt; Archive, common::Error &gt;</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::tex::BestFormatFor</name>
    <filename>structbtu_1_1tex_1_1_best_format_for.html</filename>
    <member kind="variable">
      <type>DXGI_FORMAT</type>
      <name>uncompressed</name>
      <anchorfile>structbtu_1_1tex_1_1_best_format_for.html</anchorfile>
      <anchor>ad9cf810ee1fb3872e900e9151cbcd205</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DXGI_FORMAT</type>
      <name>uncompressed_without_alpha</name>
      <anchorfile>structbtu_1_1tex_1_1_best_format_for.html</anchorfile>
      <anchor>ae6e237379b71498d0cab2a665f96cc94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DXGI_FORMAT</type>
      <name>compressed</name>
      <anchorfile>structbtu_1_1tex_1_1_best_format_for.html</anchorfile>
      <anchor>a23766d8b3211bd317e828fcf46fb7590</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DXGI_FORMAT</type>
      <name>compressed_without_alpha</name>
      <anchorfile>structbtu_1_1tex_1_1_best_format_for.html</anchorfile>
      <anchor>a7cea40676c17419d35f19758d1b23cf5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::common::detail::bind_back_fn</name>
    <filename>structbtu_1_1common_1_1detail_1_1bind__back__fn.html</filename>
    <member kind="function">
      <type>constexpr bind_back_fn2&lt; Fn, Arg1, Args... &gt;</type>
      <name>operator()</name>
      <anchorfile>structbtu_1_1common_1_1detail_1_1bind__back__fn.html</anchorfile>
      <anchor>ae84545ba9de4086ecfaaf504def07229</anchor>
      <arglist>(Fn &amp;&amp;fn, Arg1 &amp;&amp;arg1, Args &amp;&amp;...args) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::common::detail::bind_back_fn_</name>
    <filename>structbtu_1_1common_1_1detail_1_1bind__back__fn__.html</filename>
    <templarg>typename Fn</templarg>
    <templarg>typename... Args</templarg>
    <member kind="typedef">
      <type>std::tuple&lt; Fn, Args... &gt;</type>
      <name>tuple_t</name>
      <anchorfile>structbtu_1_1common_1_1detail_1_1bind__back__fn__.html</anchorfile>
      <anchor>a00b4a4caf2b9daac26cf59918b31b932</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr std::invoke_result_t&lt; Fn, CallArgs..., Args... &gt;</type>
      <name>operator()</name>
      <anchorfile>structbtu_1_1common_1_1detail_1_1bind__back__fn__.html</anchorfile>
      <anchor>a4856856796ae87085a391f68ed5746e0</anchor>
      <arglist>(CallArgs &amp;&amp;...cargs) &amp;&amp;noexcept(std::is_nothrow_invocable_v&lt; Fn, CallArgs..., Args... &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::invoke_result_t&lt; Fn &amp;, CallArgs..., Args &amp;... &gt;</type>
      <name>operator()</name>
      <anchorfile>structbtu_1_1common_1_1detail_1_1bind__back__fn__.html</anchorfile>
      <anchor>a016d9b711ad41297f38b581f7244e5d5</anchor>
      <arglist>(CallArgs &amp;&amp;...cargs) &amp;noexcept(std::is_nothrow_invocable_v&lt; Fn &amp;, CallArgs..., Args &amp;... &gt;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::invoke_result_t&lt; Fn const &amp;, CallArgs..., Args const &amp;... &gt;</type>
      <name>operator()</name>
      <anchorfile>structbtu_1_1common_1_1detail_1_1bind__back__fn__.html</anchorfile>
      <anchor>aeada2d9e9ce81bea88805e0d14977e2f</anchor>
      <arglist>(CallArgs &amp;&amp;...cargs) const &amp;noexcept(std::is_nothrow_invocable_v&lt; Fn const &amp;, CallArgs..., Args const &amp;... &gt;)</arglist>
    </member>
    <member kind="variable">
      <type>tuple_t</type>
      <name>fn_args_</name>
      <anchorfile>structbtu_1_1common_1_1detail_1_1bind__back__fn__.html</anchorfile>
      <anchor>a338cca62d94c7658a7c235dd2b2caeb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::bsa::BsaErrCategory</name>
    <filename>structbtu_1_1bsa_1_1_bsa_err_category.html</filename>
    <base>std::error_category</base>
    <member kind="function">
      <type>auto</type>
      <name>name</name>
      <anchorfile>structbtu_1_1bsa_1_1_bsa_err_category.html</anchorfile>
      <anchor>adad186ea0282a29ed5117cd7fc92018b</anchor>
      <arglist>() const noexcept -&gt; const char *override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>message</name>
      <anchorfile>structbtu_1_1bsa_1_1_bsa_err_category.html</anchorfile>
      <anchor>afc0a1c13e63bc7f100412096bbca7713</anchor>
      <arglist>(int ev) const -&gt; std::string override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::common::Cards</name>
    <filename>structbtu_1_1common_1_1_cards.html</filename>
    <member kind="variable">
      <type>U8Unit</type>
      <name>any</name>
      <anchorfile>structbtu_1_1common_1_1_cards.html</anchorfile>
      <anchor>a60da3f60730fc60a9e52cc2466e4b79d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>U8Unit</type>
      <name>any_repeat</name>
      <anchorfile>structbtu_1_1common_1_1_cards.html</anchorfile>
      <anchor>a6ae72ec9abe3fa121d41c6e313330c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>U8Unit</type>
      <name>set_begin</name>
      <anchorfile>structbtu_1_1common_1_1_cards.html</anchorfile>
      <anchor>a5da42a7dfdc164fde29db9210d6af1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>U8Unit</type>
      <name>set_end</name>
      <anchorfile>structbtu_1_1common_1_1_cards.html</anchorfile>
      <anchor>aebcc2a4733ed9f1c938af044004726bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::tex::CompressionDevice</name>
    <filename>classbtu_1_1tex_1_1_compression_device.html</filename>
    <class kind="struct">btu::tex::CompressionDevice::AdapterInfo</class>
    <member kind="typedef">
      <type>std::function&lt; void(ID3D11Device *dev)&gt;</type>
      <name>Callback</name>
      <anchorfile>classbtu_1_1tex_1_1_compression_device.html</anchorfile>
      <anchor>aa6bb53009e15577a506e8592dd9b467f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CompressionDevice</name>
      <anchorfile>classbtu_1_1tex_1_1_compression_device.html</anchorfile>
      <anchor>a36bd3ec4a339a2d45033d462b97f6152</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CompressionDevice</name>
      <anchorfile>classbtu_1_1tex_1_1_compression_device.html</anchorfile>
      <anchor>a501510c60f93f328d548b7e61ef1814e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>list_adapters</name>
      <anchorfile>classbtu_1_1tex_1_1_compression_device.html</anchorfile>
      <anchor>ababee96fe980a29ba3fd20fd64242680</anchor>
      <arglist>() const noexcept -&gt; const std::vector&lt; AdapterInfo &gt; &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>try_apply</name>
      <anchorfile>classbtu_1_1tex_1_1_compression_device.html</anchorfile>
      <anchor>a5a9cf705d08169098cbf72fc0cf9110f</anchor>
      <arglist>(const Callback &amp;callback) noexcept(noexcept(callback)) -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::tex::CrunchTexture</name>
    <filename>classbtu_1_1tex_1_1_crunch_texture.html</filename>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classbtu_1_1tex_1_1_crunch_texture.html</anchorfile>
      <anchor>afc04646f1712b3a249fe4c19a0494141</anchor>
      <arglist>(const mipmapped_texture &amp;tex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get</name>
      <anchorfile>classbtu_1_1tex_1_1_crunch_texture.html</anchorfile>
      <anchor>adb5464217724ae4f1e7df3599b1ad249</anchor>
      <arglist>() noexcept -&gt; mipmapped_texture &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get</name>
      <anchorfile>classbtu_1_1tex_1_1_crunch_texture.html</anchorfile>
      <anchor>a44dc640403863e9deaa4868d37aa1f35</anchor>
      <arglist>() const noexcept -&gt; const mipmapped_texture &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_dimension</name>
      <anchorfile>classbtu_1_1tex_1_1_crunch_texture.html</anchorfile>
      <anchor>a00f4e60da37af67c36b531068191d4cf</anchor>
      <arglist>() const noexcept -&gt; Dimension</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_load_path</name>
      <anchorfile>classbtu_1_1tex_1_1_crunch_texture.html</anchorfile>
      <anchor>a935daa60bb13905dca3288a22d25c008</anchor>
      <arglist>() const noexcept -&gt; const Path &amp;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_load_path</name>
      <anchorfile>classbtu_1_1tex_1_1_crunch_texture.html</anchorfile>
      <anchor>a937340920a1c4958b3d58cc15aa4d649</anchor>
      <arglist>(Path path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_texture_type</name>
      <anchorfile>classbtu_1_1tex_1_1_crunch_texture.html</anchorfile>
      <anchor>a24bbe87044d3d1943f354d17cb690047</anchor>
      <arglist>() const noexcept -&gt; TextureType</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_format_as_dxgi</name>
      <anchorfile>classbtu_1_1tex_1_1_crunch_texture.html</anchorfile>
      <anchor>afc3fbe3e4db607496b627eaf6406c9e6</anchor>
      <arglist>() const noexcept -&gt; DXGI_FORMAT</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator==</name>
      <anchorfile>classbtu_1_1tex_1_1_crunch_texture.html</anchorfile>
      <anchor>a53b9357cfd723e4a3ca949a6b51b1da1</anchor>
      <arglist>(const CrunchTexture &amp;) const noexcept -&gt; bool=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::tex::Dimension</name>
    <filename>structbtu_1_1tex_1_1_dimension.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>structbtu_1_1tex_1_1_dimension.html</anchorfile>
      <anchor>aca97a7e7c7c1f8a040671943b3fe8994</anchor>
      <arglist>(const Dimension &amp;) const noexcept=default</arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>w</name>
      <anchorfile>structbtu_1_1tex_1_1_dimension.html</anchorfile>
      <anchor>aaa6e3f954465f98793354298537ade32</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>h</name>
      <anchorfile>structbtu_1_1tex_1_1_dimension.html</anchorfile>
      <anchor>a4dbc3be9857200add5e34d1b3dfa0a7f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::bsa::Error</name>
    <filename>structbtu_1_1bsa_1_1_error.html</filename>
    <base>std::error_code</base>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>structbtu_1_1bsa_1_1_error.html</anchorfile>
      <anchor>a460164aaebf604449b0bf5058b42b946</anchor>
      <arglist>(std::error_code ec, std::source_location l=std::source_location::current())</arglist>
    </member>
    <member kind="variable">
      <type>std::source_location</type>
      <name>loc</name>
      <anchorfile>structbtu_1_1bsa_1_1_error.html</anchorfile>
      <anchor>a3d69dda5a4eef0ec6487194ec0d0f371</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::common::Error</name>
    <filename>structbtu_1_1common_1_1_error.html</filename>
    <base>std::error_code</base>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>structbtu_1_1common_1_1_error.html</anchorfile>
      <anchor>a460164aaebf604449b0bf5058b42b946</anchor>
      <arglist>(std::error_code ec, std::source_location l=std::source_location::current())</arglist>
    </member>
    <member kind="variable">
      <type>std::source_location</type>
      <name>loc</name>
      <anchorfile>structbtu_1_1common_1_1_error.html</anchorfile>
      <anchor>a3d69dda5a4eef0ec6487194ec0d0f371</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::esp::Error</name>
    <filename>structbtu_1_1esp_1_1_error.html</filename>
    <base>std::error_code</base>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>structbtu_1_1esp_1_1_error.html</anchorfile>
      <anchor>a460164aaebf604449b0bf5058b42b946</anchor>
      <arglist>(std::error_code ec, std::source_location l=std::source_location::current())</arglist>
    </member>
    <member kind="variable">
      <type>std::source_location</type>
      <name>loc</name>
      <anchorfile>structbtu_1_1esp_1_1_error.html</anchorfile>
      <anchor>a3d69dda5a4eef0ec6487194ec0d0f371</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::hkx::Error</name>
    <filename>structbtu_1_1hkx_1_1_error.html</filename>
    <base>std::error_code</base>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>structbtu_1_1hkx_1_1_error.html</anchorfile>
      <anchor>a460164aaebf604449b0bf5058b42b946</anchor>
      <arglist>(std::error_code ec, std::source_location l=std::source_location::current())</arglist>
    </member>
    <member kind="variable">
      <type>std::source_location</type>
      <name>loc</name>
      <anchorfile>structbtu_1_1hkx_1_1_error.html</anchorfile>
      <anchor>a3d69dda5a4eef0ec6487194ec0d0f371</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::tex::Error</name>
    <filename>structbtu_1_1tex_1_1_error.html</filename>
    <base>std::error_code</base>
    <member kind="function">
      <type></type>
      <name>Error</name>
      <anchorfile>structbtu_1_1tex_1_1_error.html</anchorfile>
      <anchor>a460164aaebf604449b0bf5058b42b946</anchor>
      <arglist>(std::error_code ec, std::source_location l=std::source_location::current())</arglist>
    </member>
    <member kind="variable">
      <type>std::source_location</type>
      <name>loc</name>
      <anchorfile>structbtu_1_1tex_1_1_error.html</anchorfile>
      <anchor>a3d69dda5a4eef0ec6487194ec0d0f371</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::esp::EspErrCategory</name>
    <filename>structbtu_1_1esp_1_1_esp_err_category.html</filename>
    <base>std::error_category</base>
    <member kind="function">
      <type>auto</type>
      <name>name</name>
      <anchorfile>structbtu_1_1esp_1_1_esp_err_category.html</anchorfile>
      <anchor>ab0d74d2044ca7bb8a6900b066664fcd7</anchor>
      <arglist>() const noexcept -&gt; const char *override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>message</name>
      <anchorfile>structbtu_1_1esp_1_1_esp_err_category.html</anchorfile>
      <anchor>aca20308a71398a9a4f46e260b1fe7893</anchor>
      <arglist>(int ev) const -&gt; std::string override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::common::Exception</name>
    <filename>classbtu_1_1common_1_1_exception.html</filename>
    <base>std::exception</base>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>classbtu_1_1common_1_1_exception.html</anchorfile>
      <anchor>a4436d43f3cf6f869cf07d09253aef661</anchor>
      <arglist>(Error err)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>what</name>
      <anchorfile>classbtu_1_1common_1_1_exception.html</anchorfile>
      <anchor>a81161a6a37fadeea027335a8fdd7aa96</anchor>
      <arglist>() const noexcept -&gt; const char *override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>error</name>
      <anchorfile>classbtu_1_1common_1_1_exception.html</anchorfile>
      <anchor>a91787cea81155811e929f950e4f91994</anchor>
      <arglist>() const noexcept -&gt; const Error &amp;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::bsa::FailureSourceCategory</name>
    <filename>classbtu_1_1bsa_1_1_failure_source_category.html</filename>
    <base>std::error_category</base>
    <member kind="function">
      <type>auto</type>
      <name>name</name>
      <anchorfile>classbtu_1_1bsa_1_1_failure_source_category.html</anchorfile>
      <anchor>ad6c5d63a2715055aab4d29cb0d8ff4a9</anchor>
      <arglist>() const noexcept -&gt; const char *override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>message</name>
      <anchorfile>classbtu_1_1bsa_1_1_failure_source_category.html</anchorfile>
      <anchor>a8ce205844b1e40aae1bfbb01b4630783</anchor>
      <arglist>(int ev) const -&gt; std::string override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>equivalent</name>
      <anchorfile>classbtu_1_1bsa_1_1_failure_source_category.html</anchorfile>
      <anchor>a043e7056c7240748a9fe58460f13599c</anchor>
      <arglist>(const std::error_code &amp;ec, int cond) const noexcept -&gt; bool override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::esp::FailureSourceCategory</name>
    <filename>classbtu_1_1esp_1_1_failure_source_category.html</filename>
    <base>std::error_category</base>
    <member kind="function">
      <type>auto</type>
      <name>name</name>
      <anchorfile>classbtu_1_1esp_1_1_failure_source_category.html</anchorfile>
      <anchor>ae6e66a7e53d27295c56d6c455119bcaa</anchor>
      <arglist>() const noexcept -&gt; const char *override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>message</name>
      <anchorfile>classbtu_1_1esp_1_1_failure_source_category.html</anchorfile>
      <anchor>abfa9deab3efecb9f687b0fc9db39e81c</anchor>
      <arglist>(int ev) const -&gt; std::string override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>equivalent</name>
      <anchorfile>classbtu_1_1esp_1_1_failure_source_category.html</anchorfile>
      <anchor>a1c8a6ea193958f6dfeaa372130b459de</anchor>
      <arglist>(const std::error_code &amp;ec, int cond) const noexcept -&gt; bool override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::hkx::FailureSourceCategory</name>
    <filename>classbtu_1_1hkx_1_1_failure_source_category.html</filename>
    <base>std::error_category</base>
    <member kind="function">
      <type>auto</type>
      <name>name</name>
      <anchorfile>classbtu_1_1hkx_1_1_failure_source_category.html</anchorfile>
      <anchor>a966c6028a152f8ccea48a35221c6170d</anchor>
      <arglist>() const noexcept -&gt; const char *override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>message</name>
      <anchorfile>classbtu_1_1hkx_1_1_failure_source_category.html</anchorfile>
      <anchor>a1f49a5a755c21daa26e047675b3fbbc0</anchor>
      <arglist>(int ev) const -&gt; std::string override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>equivalent</name>
      <anchorfile>classbtu_1_1hkx_1_1_failure_source_category.html</anchorfile>
      <anchor>ab67369d0d4a0f509fe127d7736c4fee6</anchor>
      <arglist>(const std::error_code &amp;ec, int cond) const noexcept -&gt; bool override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::tex::FailureSourceCategory</name>
    <filename>classbtu_1_1tex_1_1_failure_source_category.html</filename>
    <base>std::error_category</base>
    <member kind="function">
      <type>auto</type>
      <name>name</name>
      <anchorfile>classbtu_1_1tex_1_1_failure_source_category.html</anchorfile>
      <anchor>ae29ed0a5e2095460f614a6c2c6d20173</anchor>
      <arglist>() const noexcept -&gt; const char *override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>message</name>
      <anchorfile>classbtu_1_1tex_1_1_failure_source_category.html</anchorfile>
      <anchor>a1b57d2c49f81e4ea18e6098e01e62c5e</anchor>
      <arglist>(int ev) const -&gt; std::string override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>equivalent</name>
      <anchorfile>classbtu_1_1tex_1_1_failure_source_category.html</anchorfile>
      <anchor>a937f073fff3419140f8e8bba506f0ffc</anchor>
      <arglist>(const std::error_code &amp;ec, int cond) const noexcept -&gt; bool override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::bsa::File</name>
    <filename>classbtu_1_1bsa_1_1_file.html</filename>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>classbtu_1_1bsa_1_1_file.html</anchorfile>
      <anchor>aabb048269f9e890fc80f500497ce7cdb</anchor>
      <arglist>(ArchiveVersion version, ArchiveType type, std::optional&lt; TES4ArchiveType &gt; tes4_type=std::nullopt) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>File</name>
      <anchorfile>classbtu_1_1bsa_1_1_file.html</anchorfile>
      <anchor>a5d4c15039050bfa290316a89ad25c6c0</anchor>
      <arglist>(UnderlyingFile f, ArchiveVersion version, ArchiveType type, std::optional&lt; TES4ArchiveType &gt; tes4_type) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>compressed</name>
      <anchorfile>classbtu_1_1bsa_1_1_file.html</anchorfile>
      <anchor>a1692d60dc93ae3cd2ea70da0fdfd063e</anchor>
      <arglist>() const noexcept -&gt; Compression</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>compress</name>
      <anchorfile>classbtu_1_1bsa_1_1_file.html</anchorfile>
      <anchor>a3efdf2564d20ed007972a487e480ab64</anchor>
      <arglist>() noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>read</name>
      <anchorfile>classbtu_1_1bsa_1_1_file.html</anchorfile>
      <anchor>a82d8fc39c59f2464f2149a3541a21ad3</anchor>
      <arglist>(Path path) noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>read</name>
      <anchorfile>classbtu_1_1bsa_1_1_file.html</anchorfile>
      <anchor>a2d463130a119a897162395832d587e67</anchor>
      <arglist>(std::span&lt; std::byte &gt; src) noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>write</name>
      <anchorfile>classbtu_1_1bsa_1_1_file.html</anchorfile>
      <anchor>ac0c8f415c997189e2b99826dd02d7977</anchor>
      <arglist>(Path path) const noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>write</name>
      <anchorfile>classbtu_1_1bsa_1_1_file.html</anchorfile>
      <anchor>a4588f76712d84d598359238911a15720</anchor>
      <arglist>(binary_io::any_ostream &amp;dst) const noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>version</name>
      <anchorfile>classbtu_1_1bsa_1_1_file.html</anchorfile>
      <anchor>a314e2fe64f9e9c2e09b6d2fd12a47509</anchor>
      <arglist>() const noexcept -&gt; ArchiveVersion</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>type</name>
      <anchorfile>classbtu_1_1bsa_1_1_file.html</anchorfile>
      <anchor>ab146572a766898e1eb0bffa00df25f3f</anchor>
      <arglist>() const noexcept -&gt; ArchiveType</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>tes4_archive_type</name>
      <anchorfile>classbtu_1_1bsa_1_1_file.html</anchorfile>
      <anchor>a9322f86ecadbe3eb1ad4549f80819242</anchor>
      <arglist>() const noexcept -&gt; std::optional&lt; TES4ArchiveType &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>classbtu_1_1bsa_1_1_file.html</anchorfile>
      <anchor>a040db94cac0b31a1ddbdcdcbd75dc867</anchor>
      <arglist>() const noexcept -&gt; std::optional&lt; size_t &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_raw_file</name>
      <anchorfile>classbtu_1_1bsa_1_1_file.html</anchorfile>
      <anchor>a1330d4121e36e07d34c9fa8e23e77ee1</anchor>
      <arglist>() &amp;&amp;noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::tex::GuessBestFormatArgs</name>
    <filename>structbtu_1_1tex_1_1_guess_best_format_args.html</filename>
    <member kind="variable">
      <type>bool</type>
      <name>opaque_alpha</name>
      <anchorfile>structbtu_1_1tex_1_1_guess_best_format_args.html</anchorfile>
      <anchor>a10abdc92f8e65378c4989582dc78164b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>allow_compressed</name>
      <anchorfile>structbtu_1_1tex_1_1_guess_best_format_args.html</anchorfile>
      <anchor>ab094e8c760f2d8d896faf5c88f525d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>force_alpha</name>
      <anchorfile>structbtu_1_1tex_1_1_guess_best_format_args.html</anchorfile>
      <anchor>aad3df893fd9bf57917467fda81922417</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::common::InvalidUTF8</name>
    <filename>classbtu_1_1common_1_1_invalid_u_t_f8.html</filename>
    <base>std::exception</base>
    <member kind="function">
      <type>constexpr auto</type>
      <name>what</name>
      <anchorfile>classbtu_1_1common_1_1_invalid_u_t_f8.html</anchorfile>
      <anchor>addb33f59ed9bd37dd69b7d630deabfd5</anchor>
      <arglist>() const noexcept -&gt; const char *override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::is_error_code_enum&lt; btu::bsa::BsaErr &gt;</name>
    <filename>structstd_1_1is__error__code__enum_3_01btu_1_1bsa_1_1_bsa_err_01_4.html</filename>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>std::is_error_code_enum&lt; btu::esp::EspErr &gt;</name>
    <filename>structstd_1_1is__error__code__enum_3_01btu_1_1esp_1_1_esp_err_01_4.html</filename>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>std::is_error_code_enum&lt; btu::hkx::AnimErr &gt;</name>
    <filename>structstd_1_1is__error__code__enum_3_01btu_1_1hkx_1_1_anim_err_01_4.html</filename>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>std::is_error_code_enum&lt; btu::tex::TextureErr &gt;</name>
    <filename>structstd_1_1is__error__code__enum_3_01btu_1_1tex_1_1_texture_err_01_4.html</filename>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>std::is_error_condition_enum&lt; btu::bsa::FailureSource &gt;</name>
    <filename>structstd_1_1is__error__condition__enum_3_01btu_1_1bsa_1_1_failure_source_01_4.html</filename>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>std::is_error_condition_enum&lt; btu::esp::FailureSource &gt;</name>
    <filename>structstd_1_1is__error__condition__enum_3_01btu_1_1esp_1_1_failure_source_01_4.html</filename>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>std::is_error_condition_enum&lt; btu::hkx::FailureSource &gt;</name>
    <filename>structstd_1_1is__error__condition__enum_3_01btu_1_1hkx_1_1_failure_source_01_4.html</filename>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>std::is_error_condition_enum&lt; btu::tex::FailureSource &gt;</name>
    <filename>structstd_1_1is__error__condition__enum_3_01btu_1_1tex_1_1_failure_source_01_4.html</filename>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>btu::common::is_mutable_lambda</name>
    <filename>structbtu_1_1common_1_1is__mutable__lambda.html</filename>
    <templarg>class T</templarg>
    <base>btu::common::is_mutable_lambda_helper&lt; decltype(&amp;T::operator())&gt;</base>
  </compound>
  <compound kind="struct">
    <name>btu::common::is_mutable_lambda_helper</name>
    <filename>structbtu_1_1common_1_1is__mutable__lambda__helper.html</filename>
    <templarg>class</templarg>
    <base>std::false_type</base>
  </compound>
  <compound kind="struct">
    <name>btu::common::is_mutable_lambda_helper&lt; Ret(Class::*)(Args...) const &gt;</name>
    <filename>structbtu_1_1common_1_1is__mutable__lambda__helper_3_01_ret_07_class_1_1_5_08_07_args_8_8_8_08_01const_01_4.html</filename>
    <templarg>class Ret</templarg>
    <templarg>class Class</templarg>
    <templarg>class... Args</templarg>
    <base>std::false_type</base>
    <base>std::false_type</base>
  </compound>
  <compound kind="struct">
    <name>btu::common::is_mutable_lambda_helper&lt; Ret(Class::*)(Args...)&gt;</name>
    <filename>structbtu_1_1common_1_1is__mutable__lambda__helper_3_01_ret_07_class_1_1_5_08_07_args_8_8_8_08_4.html</filename>
    <templarg>class Ret</templarg>
    <templarg>class Class</templarg>
    <templarg>class... Args</templarg>
    <base>std::false_type</base>
    <base>std::true_type</base>
  </compound>
  <compound kind="struct">
    <name>btu::common::is_variant_member</name>
    <filename>structbtu_1_1common_1_1is__variant__member.html</filename>
    <templarg>class T</templarg>
    <templarg>class U</templarg>
  </compound>
  <compound kind="struct">
    <name>btu::common::is_variant_member&lt; T, std::variant&lt; Ts... &gt; &gt;</name>
    <filename>structbtu_1_1common_1_1is__variant__member_3_01_t_00_01std_1_1variant_3_01_ts_8_8_8_01_4_01_4.html</filename>
    <templarg>class T</templarg>
    <templarg>class... Ts</templarg>
    <base>std::bool_constant&lt;(std::is_same_v&lt; T, Ts &gt;||...)&gt;</base>
  </compound>
  <compound kind="class">
    <name>btu::common::Lazy</name>
    <filename>classbtu_1_1common_1_1_lazy.html</filename>
    <templarg>typename T</templarg>
    <member kind="function">
      <type></type>
      <name>Lazy</name>
      <anchorfile>classbtu_1_1common_1_1_lazy.html</anchorfile>
      <anchor>a03006ccd5ac3a6f30dcd655d77427acb</anchor>
      <arglist>(std::function&lt; T()&gt; func)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator*</name>
      <anchorfile>classbtu_1_1common_1_1_lazy.html</anchorfile>
      <anchor>a0200e2449cb34f4095ee9438db49a852</anchor>
      <arglist>() const -&gt; T &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-&gt;</name>
      <anchorfile>classbtu_1_1common_1_1_lazy.html</anchorfile>
      <anchor>a8f36838bc954a952cd591418d5cea9ef</anchor>
      <arglist>() const -&gt; T *</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::nif::Mesh</name>
    <filename>classbtu_1_1nif_1_1_mesh.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>get</name>
      <anchorfile>classbtu_1_1nif_1_1_mesh.html</anchorfile>
      <anchor>a53182fff47d9e0e7691827738d7100d6</anchor>
      <arglist>() noexcept -&gt; nifly::NifFile &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get</name>
      <anchorfile>classbtu_1_1nif_1_1_mesh.html</anchorfile>
      <anchor>a7d5af963185e67b9eeb97bec349e45d7</anchor>
      <arglist>() const noexcept -&gt; const nifly::NifFile &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_load_path</name>
      <anchorfile>classbtu_1_1nif_1_1_mesh.html</anchorfile>
      <anchor>ad2efd6f26e0a4b58858f0e8253f22eec</anchor>
      <arglist>() const noexcept -&gt; const Path &amp;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_load_path</name>
      <anchorfile>classbtu_1_1nif_1_1_mesh.html</anchorfile>
      <anchor>a03604d50da99a10fe5364e1d817d4aab</anchor>
      <arglist>(Path path) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::modmanager::ModFile</name>
    <filename>structbtu_1_1modmanager_1_1_mod_file.html</filename>
    <member kind="variable">
      <type>Path</type>
      <name>relative_path</name>
      <anchorfile>structbtu_1_1modmanager_1_1_mod_file.html</anchorfile>
      <anchor>a5bb00e270503cf276e40ad45ba9be018</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>common::Lazy&lt; tl::expected&lt; std::vector&lt; std::byte &gt;, common::Error &gt; &gt;</type>
      <name>content</name>
      <anchorfile>structbtu_1_1modmanager_1_1_mod_file.html</anchorfile>
      <anchor>a5ac107f78eb83620179b3f8505d144a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::modmanager::ModFolder</name>
    <filename>classbtu_1_1modmanager_1_1_mod_folder.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ArchiveTooLargeAction</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder.html</anchorfile>
      <anchor>a17a8aef9ea523d598ef6a7265d49b2f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ArchiveTooLargeState</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder.html</anchorfile>
      <anchor>a7a74fe4be88cee012d1b8c069fd12c84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ModFolder</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder.html</anchorfile>
      <anchor>ae8d0fc607fa5038faf3e461b2dbab690</anchor>
      <arglist>(Path directory, bsa::Settings bsa_settings, bool ignore_existing_archives=false)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder.html</anchorfile>
      <anchor>ad8a5ca397fb4a06b128e49b95adc8cb4</anchor>
      <arglist>() noexcept -&gt; size_t</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transform</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder.html</anchorfile>
      <anchor>a8a35dc78c08fafd345f78d5438105f2d</anchor>
      <arglist>(ModFolderTransformer &amp;transformer) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>iterate</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder.html</anchorfile>
      <anchor>a89c8b796412d358a404c930e89f425ed</anchor>
      <arglist>(ModFolderIterator &amp;iterator) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>name</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder.html</anchorfile>
      <anchor>a79ad5d1adb178c2f921b76a970ad9545</anchor>
      <arglist>() const noexcept -&gt; std::u8string</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>path</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder.html</anchorfile>
      <anchor>a594fe5645fb1f4c0d01ae634a3d5e668</anchor>
      <arglist>() const noexcept -&gt; const Path &amp;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::modmanager::ModFolderIterator</name>
    <filename>classbtu_1_1modmanager_1_1_mod_folder_iterator.html</filename>
    <base>btu::modmanager::ModFolderIteratorBase</base>
    <member kind="enumeration">
      <type></type>
      <name>ArchiveTooLargeAction</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a17a8aef9ea523d598ef6a7265d49b2f1</anchor>
      <arglist></arglist>
      <enumvalue file="classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html" anchor="a17a8aef9ea523d598ef6a7265d49b2f1a72ef2b9b6965d078e3c7f95487a82d1c">Skip</enumvalue>
      <enumvalue file="classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html" anchor="a17a8aef9ea523d598ef6a7265d49b2f1ab6ec7abeb6ae29cc35a4b47475e12afe">Process</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ArchiveTooLargeState</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a7a74fe4be88cee012d1b8c069fd12c84</anchor>
      <arglist></arglist>
      <enumvalue file="classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html" anchor="a7a74fe4be88cee012d1b8c069fd12c84a7922dd8e1996f8ad61e7a9d79f4acf4b">BeforeProcessing</enumvalue>
      <enumvalue file="classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html" anchor="a7a74fe4be88cee012d1b8c069fd12c84a395a99a7758dff680a41caeff22bbdad">AfterProcessing</enumvalue>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>process_file</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator.html</anchorfile>
      <anchor>a838dd55399274c39ef21f520f272656a</anchor>
      <arglist>(ModFile file) noexcept=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual auto</type>
      <name>archive_too_large</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a2d9e1f0e14c04b8717ffa100f8bdfe1a</anchor>
      <arglist>(const Path &amp;archive_path, ArchiveTooLargeState state) noexcept -&gt; ArchiveTooLargeAction=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>failed_to_read_archive</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a368e3cbe73f9e06dde994305adf6a71d</anchor>
      <arglist>(const Path &amp;archive_path) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual auto</type>
      <name>stop_requested</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a15ae8d57e00bfd03b5cf735d6ea45bbb</anchor>
      <arglist>() const noexcept -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::modmanager::ModFolderIteratorBase</name>
    <filename>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ArchiveTooLargeAction</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a17a8aef9ea523d598ef6a7265d49b2f1</anchor>
      <arglist></arglist>
      <enumvalue file="classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html" anchor="a17a8aef9ea523d598ef6a7265d49b2f1a72ef2b9b6965d078e3c7f95487a82d1c">Skip</enumvalue>
      <enumvalue file="classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html" anchor="a17a8aef9ea523d598ef6a7265d49b2f1ab6ec7abeb6ae29cc35a4b47475e12afe">Process</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ArchiveTooLargeState</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a7a74fe4be88cee012d1b8c069fd12c84</anchor>
      <arglist></arglist>
      <enumvalue file="classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html" anchor="a7a74fe4be88cee012d1b8c069fd12c84a7922dd8e1996f8ad61e7a9d79f4acf4b">BeforeProcessing</enumvalue>
      <enumvalue file="classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html" anchor="a7a74fe4be88cee012d1b8c069fd12c84a395a99a7758dff680a41caeff22bbdad">AfterProcessing</enumvalue>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ModFolderIteratorBase</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a130d8c5df330d88c3d29b8391141d318</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual auto</type>
      <name>archive_too_large</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a2d9e1f0e14c04b8717ffa100f8bdfe1a</anchor>
      <arglist>(const Path &amp;archive_path, ArchiveTooLargeState state) noexcept -&gt; ArchiveTooLargeAction=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>failed_to_read_archive</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a368e3cbe73f9e06dde994305adf6a71d</anchor>
      <arglist>(const Path &amp;archive_path) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual auto</type>
      <name>stop_requested</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a15ae8d57e00bfd03b5cf735d6ea45bbb</anchor>
      <arglist>() const noexcept -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::modmanager::ModFolderTransformer</name>
    <filename>classbtu_1_1modmanager_1_1_mod_folder_transformer.html</filename>
    <base>btu::modmanager::ModFolderIteratorBase</base>
    <member kind="enumeration">
      <type></type>
      <name>ArchiveTooLargeAction</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a17a8aef9ea523d598ef6a7265d49b2f1</anchor>
      <arglist></arglist>
      <enumvalue file="classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html" anchor="a17a8aef9ea523d598ef6a7265d49b2f1a72ef2b9b6965d078e3c7f95487a82d1c">Skip</enumvalue>
      <enumvalue file="classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html" anchor="a17a8aef9ea523d598ef6a7265d49b2f1ab6ec7abeb6ae29cc35a4b47475e12afe">Process</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ArchiveTooLargeState</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a7a74fe4be88cee012d1b8c069fd12c84</anchor>
      <arglist></arglist>
      <enumvalue file="classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html" anchor="a7a74fe4be88cee012d1b8c069fd12c84a7922dd8e1996f8ad61e7a9d79f4acf4b">BeforeProcessing</enumvalue>
      <enumvalue file="classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html" anchor="a7a74fe4be88cee012d1b8c069fd12c84a395a99a7758dff680a41caeff22bbdad">AfterProcessing</enumvalue>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual auto</type>
      <name>transform_file</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_transformer.html</anchorfile>
      <anchor>a3a5d3780b4da0a3f6e35040d73052f8b</anchor>
      <arglist>(ModFile file) noexcept -&gt; std::optional&lt; std::vector&lt; std::byte &gt; &gt;=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>failed_to_write_transformed_file</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_transformer.html</anchorfile>
      <anchor>a41ec7e80f78c23d3acb21016585b100c</anchor>
      <arglist>(const Path &amp;relative_path, std::span&lt; const std::byte &gt; content) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>failed_to_read_transformed_file</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_transformer.html</anchorfile>
      <anchor>aeaa41859dbf2473164212ef6539bf1fc</anchor>
      <arglist>(const Path &amp;relative_path, std::span&lt; const std::byte &gt; content) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>failed_to_write_archive</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_transformer.html</anchorfile>
      <anchor>ad68587ecc80c9ed72e2beaf964920363</anchor>
      <arglist>(const Path &amp;old_archive_path, const Path &amp;new_archive_path) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>failed_to_change_archive_version</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_transformer.html</anchorfile>
      <anchor>a29c73360759bc152f57f5dde8a7d8248</anchor>
      <arglist>(const Path &amp;path, const common::Error &amp;error) noexcept</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual auto</type>
      <name>archive_too_large</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a2d9e1f0e14c04b8717ffa100f8bdfe1a</anchor>
      <arglist>(const Path &amp;archive_path, ArchiveTooLargeState state) noexcept -&gt; ArchiveTooLargeAction=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>failed_to_read_archive</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a368e3cbe73f9e06dde994305adf6a71d</anchor>
      <arglist>(const Path &amp;archive_path) noexcept</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual auto</type>
      <name>stop_requested</name>
      <anchorfile>classbtu_1_1modmanager_1_1_mod_folder_iterator_base.html</anchorfile>
      <anchor>a15ae8d57e00bfd03b5cf735d6ea45bbb</anchor>
      <arglist>() const noexcept -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::common::Overload</name>
    <filename>structbtu_1_1common_1_1_overload.html</filename>
    <templarg>class... Ts</templarg>
  </compound>
  <compound kind="struct">
    <name>btu::bsa::PackSettings</name>
    <filename>structbtu_1_1bsa_1_1_pack_settings.html</filename>
    <member kind="variable">
      <type>Path</type>
      <name>input_dir</name>
      <anchorfile>structbtu_1_1bsa_1_1_pack_settings.html</anchorfile>
      <anchor>ae64cdb336db5a3100b69727ce13e0047</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Settings</type>
      <name>game_settings</name>
      <anchorfile>structbtu_1_1bsa_1_1_pack_settings.html</anchorfile>
      <anchor>a1b75a2b3b034be21edb457a18215d9e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Compression</type>
      <name>compress</name>
      <anchorfile>structbtu_1_1bsa_1_1_pack_settings.html</anchorfile>
      <anchor>adbbd147e8f27b48a3f81c0f4ca8ba04c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; AllowFilePred &gt;</type>
      <name>allow_file_pred</name>
      <anchorfile>structbtu_1_1bsa_1_1_pack_settings.html</anchorfile>
      <anchor>a9e308eaeabc4b7e6efc9e4e18e0632fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::esp::detail::PluginFieldHeader</name>
    <filename>structbtu_1_1esp_1_1detail_1_1_plugin_field_header.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>type</name>
      <anchorfile>structbtu_1_1esp_1_1detail_1_1_plugin_field_header.html</anchorfile>
      <anchor>a499d674802380f3f08e8ec3eb7896818</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>data_size</name>
      <anchorfile>structbtu_1_1esp_1_1detail_1_1_plugin_field_header.html</anchorfile>
      <anchor>ad173a4651ec37dffd7135c0bae1ca13f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="union">
    <name>btu::esp::detail::PluginRecordHeader</name>
    <filename>unionbtu_1_1esp_1_1detail_1_1_plugin_record_header.html</filename>
    <member kind="variable">
      <type>RecordHeader</type>
      <name>record</name>
      <anchorfile>unionbtu_1_1esp_1_1detail_1_1_plugin_record_header.html</anchorfile>
      <anchor>a5dd5c9bf274643e79658f91f62cb46aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>PluginHeader</type>
      <name>plugin</name>
      <anchorfile>unionbtu_1_1esp_1_1detail_1_1_plugin_record_header.html</anchorfile>
      <anchor>aab788fff2840d52b205f5cdf39991996</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::esp::detail::RecordHeader</name>
    <filename>structbtu_1_1esp_1_1detail_1_1_record_header.html</filename>
    <member kind="variable">
      <type>char</type>
      <name>type</name>
      <anchorfile>structbtu_1_1esp_1_1detail_1_1_record_header.html</anchorfile>
      <anchor>a60be21b1732edae1e6aa2452521dbeea</anchor>
      <arglist>[4]</arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>data_size</name>
      <anchorfile>structbtu_1_1esp_1_1detail_1_1_record_header.html</anchorfile>
      <anchor>a3716797f2bfc8c63aaf77d579bcdad2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>flags</name>
      <anchorfile>structbtu_1_1esp_1_1detail_1_1_record_header.html</anchorfile>
      <anchor>aa1dbc4452d752b514d9126e6789217d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>id</name>
      <anchorfile>structbtu_1_1esp_1_1detail_1_1_record_header.html</anchorfile>
      <anchor>a7492201791acf6d7e2fe316937715869</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned short</type>
      <name>stamp</name>
      <anchorfile>structbtu_1_1esp_1_1detail_1_1_record_header.html</anchorfile>
      <anchor>a3d0df9c0fb537f4d152e36bb8957811f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>vc1</name>
      <anchorfile>structbtu_1_1esp_1_1detail_1_1_record_header.html</anchorfile>
      <anchor>a365dc061ba2b6913a4b3e1dc52b554e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>vc2</name>
      <anchorfile>structbtu_1_1esp_1_1detail_1_1_record_header.html</anchorfile>
      <anchor>a664a42db3e4e121e62782d48031d4dba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>version</name>
      <anchorfile>structbtu_1_1esp_1_1detail_1_1_record_header.html</anchorfile>
      <anchor>ac71fa083896c29a524dca9ba489929d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>unknown</name>
      <anchorfile>structbtu_1_1esp_1_1detail_1_1_record_header.html</anchorfile>
      <anchor>a94d04be6e21553f85798a8cad0528ad4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::nif::Settings</name>
    <filename>structbtu_1_1nif_1_1_settings.html</filename>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>get</name>
      <anchorfile>structbtu_1_1nif_1_1_settings.html</anchorfile>
      <anchor>ab9b9ccbb21e386348513cfb8b2aee1db</anchor>
      <arglist>(Game game) noexcept -&gt; const Settings &amp;</arglist>
    </member>
    <member kind="variable">
      <type>Game</type>
      <name>target_game</name>
      <anchorfile>structbtu_1_1nif_1_1_settings.html</anchorfile>
      <anchor>aa0b9aa81086e7770cf36e1077c1d949c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::u8string &gt;</type>
      <name>headpart_meshes</name>
      <anchorfile>structbtu_1_1nif_1_1_settings.html</anchorfile>
      <anchor>ac96f27014096b15db822fb3d23c8394f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>rename_referenced_textures</name>
      <anchorfile>structbtu_1_1nif_1_1_settings.html</anchorfile>
      <anchor>ac8f14b048cd09ccc37935163e315c8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>optimize</name>
      <anchorfile>structbtu_1_1nif_1_1_settings.html</anchorfile>
      <anchor>a43abaf793e8bc2183f9b88d604292bcf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::tex::Settings</name>
    <filename>structbtu_1_1tex_1_1_settings.html</filename>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>get</name>
      <anchorfile>structbtu_1_1tex_1_1_settings.html</anchorfile>
      <anchor>aa577ca7442a9bf3f62956d5e6d1d24ca</anchor>
      <arglist>(Game game) noexcept -&gt; const Settings &amp;</arglist>
    </member>
    <member kind="variable">
      <type>Game</type>
      <name>game</name>
      <anchorfile>structbtu_1_1tex_1_1_settings.html</anchorfile>
      <anchor>ad3ef6b3225bba3ea19aa94390291a413</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>compress</name>
      <anchorfile>structbtu_1_1tex_1_1_settings.html</anchorfile>
      <anchor>af4389ef9d708e6695994379cba2d5af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::variant&lt; std::monostate, util::ResizeRatio, Dimension &gt;</type>
      <name>resize</name>
      <anchorfile>structbtu_1_1tex_1_1_settings.html</anchorfile>
      <anchor>ad8add6206769509f94641b46532e7a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>mipmaps</name>
      <anchorfile>structbtu_1_1tex_1_1_settings.html</anchorfile>
      <anchor>a320c2cacc412b057162ed374f617fc9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>use_format_whitelist</name>
      <anchorfile>structbtu_1_1tex_1_1_settings.html</anchorfile>
      <anchor>a862b5c882b9d633a9dae49100da83293</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; DXGI_FORMAT &gt;</type>
      <name>allowed_formats</name>
      <anchorfile>structbtu_1_1tex_1_1_settings.html</anchorfile>
      <anchor>a624b06c3f3d255d55162759534ab9a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>BestFormatFor</type>
      <name>output_format</name>
      <anchorfile>structbtu_1_1tex_1_1_settings.html</anchorfile>
      <anchor>afff63960a1f655328fc30cd104f36883</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::u8string &gt;</type>
      <name>landscape_textures</name>
      <anchorfile>structbtu_1_1tex_1_1_settings.html</anchorfile>
      <anchor>af061468ef90de20aac5f2f973872edf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::tex::detail::StringFormat</name>
    <filename>structbtu_1_1tex_1_1detail_1_1_string_format.html</filename>
    <member kind="variable">
      <type>std::u8string_view</type>
      <name>name</name>
      <anchorfile>structbtu_1_1tex_1_1detail_1_1_string_format.html</anchorfile>
      <anchor>aee018949faac74f7dcd4a6525ec647f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DXGI_FORMAT</type>
      <name>format</name>
      <anchorfile>structbtu_1_1tex_1_1detail_1_1_string_format.html</anchorfile>
      <anchor>a25d8e7b5eac5a3aafe2ede2e76b40207</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::common::synchronized</name>
    <filename>classbtu_1_1common_1_1synchronized.html</filename>
    <templarg>typename GuardedData</templarg>
    <templarg>basic_lockable MutexType</templarg>
    <member kind="typedef">
      <type>GuardedData</type>
      <name>value_type</name>
      <anchorfile>classbtu_1_1common_1_1synchronized.html</anchorfile>
      <anchor>a573ebf5a9c0165527e3d00d930008a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MutexType</type>
      <name>mutex_type</name>
      <anchorfile>classbtu_1_1common_1_1synchronized.html</anchorfile>
      <anchor>ac2b51dd25c6adf6491162fb24d71aff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>synchronized</name>
      <anchorfile>classbtu_1_1common_1_1synchronized.html</anchorfile>
      <anchor>ac30f5b08ec2107a50258fd399c2c43cc</anchor>
      <arglist>(synchronized const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator=</name>
      <anchorfile>classbtu_1_1common_1_1synchronized.html</anchorfile>
      <anchor>ae128d41bfa7b0d6dd5b852271aa0fabd</anchor>
      <arglist>(synchronized const &amp;) -&gt; synchronized &amp;=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>synchronized</name>
      <anchorfile>classbtu_1_1common_1_1synchronized.html</anchorfile>
      <anchor>ab7bca419e3502a3c38c8de067ff73a30</anchor>
      <arglist>(Args &amp;&amp;...args)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>apply</name>
      <anchorfile>classbtu_1_1common_1_1synchronized.html</anchorfile>
      <anchor>a9e1e7c287a8b690b3eadaf7b885985e9</anchor>
      <arglist>(F const &amp;func)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>wlock</name>
      <anchorfile>classbtu_1_1common_1_1synchronized.html</anchorfile>
      <anchor>ac3e70457ab3b9f82244a10222c36a560</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>rlock</name>
      <anchorfile>classbtu_1_1common_1_1synchronized.html</anchorfile>
      <anchor>a231fb4e1029fdd497e489019cf5a1a48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>try_rlock</name>
      <anchorfile>classbtu_1_1common_1_1synchronized.html</anchorfile>
      <anchor>ae8f4c2eb0d2c872d38a347f31b0dcdb8</anchor>
      <arglist>() const -&gt; std::optional&lt; update_guard&lt; GuardedData const, MutexType &gt; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>try_wlock</name>
      <anchorfile>classbtu_1_1common_1_1synchronized.html</anchorfile>
      <anchor>a482dcb3a209313f68c44dfadd44bafcb</anchor>
      <arglist>() -&gt; std::optional&lt; update_guard&lt; GuardedData, MutexType &gt; &gt;</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>update_guard&lt; GuardedData, MutexType &gt;</name>
      <anchorfile>classbtu_1_1common_1_1synchronized.html</anchorfile>
      <anchor>abc969a6a7510a5e3f9065c87c5243a87</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>update_guard&lt; GuardedData const, MutexType &gt;</name>
      <anchorfile>classbtu_1_1common_1_1synchronized.html</anchorfile>
      <anchor>ab2ec3c62ea8d7db60caee4222ee9e71d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::tex::Texture</name>
    <filename>classbtu_1_1tex_1_1_texture.html</filename>
    <member kind="function">
      <type></type>
      <name>Texture</name>
      <anchorfile>classbtu_1_1tex_1_1_texture.html</anchorfile>
      <anchor>a5238806aed6f3226f9b526caa5dd13e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>classbtu_1_1tex_1_1_texture.html</anchorfile>
      <anchor>acdc4df55caac1a8ddf03441efaa956af</anchor>
      <arglist>(ScratchImage &amp;&amp;tex) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get</name>
      <anchorfile>classbtu_1_1tex_1_1_texture.html</anchorfile>
      <anchor>a32415252f7355f984c36306d0939fed7</anchor>
      <arglist>() noexcept -&gt; ScratchImage &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get</name>
      <anchorfile>classbtu_1_1tex_1_1_texture.html</anchorfile>
      <anchor>aca34726be2cda1a49cb6b4520cd755a1</anchor>
      <arglist>() const noexcept -&gt; const ScratchImage &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_images</name>
      <anchorfile>classbtu_1_1tex_1_1_texture.html</anchorfile>
      <anchor>a6122fbad4b5477ffe2a2ea1ae6293cc2</anchor>
      <arglist>() const noexcept -&gt; std::span&lt; const Image &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_dimension</name>
      <anchorfile>classbtu_1_1tex_1_1_texture.html</anchorfile>
      <anchor>aa20aee5ae3aa3547298aaa2a7d8ac24c</anchor>
      <arglist>() const noexcept -&gt; Dimension</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_load_path</name>
      <anchorfile>classbtu_1_1tex_1_1_texture.html</anchorfile>
      <anchor>a66a8f0db63c054675c80f1bfac09e575</anchor>
      <arglist>() const noexcept -&gt; const Path &amp;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_load_path</name>
      <anchorfile>classbtu_1_1tex_1_1_texture.html</anchorfile>
      <anchor>a2be4ba55e9f3a6181788b26174da6794</anchor>
      <arglist>(Path path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator==</name>
      <anchorfile>classbtu_1_1tex_1_1_texture.html</anchorfile>
      <anchor>a4acc806b55c283a208b936739662c705</anchor>
      <arglist>(const Texture &amp;) const noexcept -&gt; bool=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::tex::TextureErrCategory</name>
    <filename>structbtu_1_1tex_1_1_texture_err_category.html</filename>
    <base>std::error_category</base>
    <member kind="function">
      <type>auto</type>
      <name>name</name>
      <anchorfile>structbtu_1_1tex_1_1_texture_err_category.html</anchorfile>
      <anchor>a197c2127e90c6a59350bc83383b0fa60</anchor>
      <arglist>() const noexcept -&gt; const char *override</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>message</name>
      <anchorfile>structbtu_1_1tex_1_1_texture_err_category.html</anchorfile>
      <anchor>ad8c6311e31d942e834c2b978725960df</anchor>
      <arglist>(int ev) const -&gt; std::string override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>btu::bsa::UnpackSettings</name>
    <filename>structbtu_1_1bsa_1_1_unpack_settings.html</filename>
    <member kind="variable">
      <type>Path</type>
      <name>file_path</name>
      <anchorfile>structbtu_1_1bsa_1_1_unpack_settings.html</anchorfile>
      <anchor>a8039125f83d463088fb9add3952205a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>remove_arch</name>
      <anchorfile>structbtu_1_1bsa_1_1_unpack_settings.html</anchorfile>
      <anchor>ab0ab549dcf3b2ea37a5c9f017c1fb892</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>overwrite_existing_files</name>
      <anchorfile>structbtu_1_1bsa_1_1_unpack_settings.html</anchorfile>
      <anchor>a39d17e6b6c2f4dc6c1b705812cf4e1f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; Path &gt;</type>
      <name>extract_to_dir</name>
      <anchorfile>structbtu_1_1bsa_1_1_unpack_settings.html</anchorfile>
      <anchor>a03b8dca75ec9dd697c77577c0afb073f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::common::update_guard</name>
    <filename>classbtu_1_1common_1_1update__guard.html</filename>
    <templarg>typename GuardedType</templarg>
    <templarg>basic_lockable MutexType</templarg>
    <member kind="typedef">
      <type>GuardedType</type>
      <name>value_type</name>
      <anchorfile>classbtu_1_1common_1_1update__guard.html</anchorfile>
      <anchor>ab46ba63f63ec773f0daf97544bdcd5b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MutexType</type>
      <name>mutex_type</name>
      <anchorfile>classbtu_1_1common_1_1update__guard.html</anchorfile>
      <anchor>aa44bc2ff7a19d19aae043c317e618faf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>update_guard</name>
      <anchorfile>classbtu_1_1common_1_1update__guard.html</anchorfile>
      <anchor>a5e4ea1823260f7c04b3b652d1661e6f5</anchor>
      <arglist>(synchronized&lt; GuardedType, MutexType &gt; &amp;sv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>update_guard</name>
      <anchorfile>classbtu_1_1common_1_1update__guard.html</anchorfile>
      <anchor>a63e7aa983ed3320d66ee380e92aec002</anchor>
      <arglist>(const synchronized&lt; std::remove_const_t&lt; GuardedType &gt;, MutexType &gt; &amp;sv)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>update_guard</name>
      <anchorfile>classbtu_1_1common_1_1update__guard.html</anchorfile>
      <anchor>aba5f0b2482f38730377748162c9dd49e</anchor>
      <arglist>(synchronized&lt; GuardedType, MutexType &gt; &amp;sv, std::unique_lock&lt; MutexType &gt; lock)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>update_guard</name>
      <anchorfile>classbtu_1_1common_1_1update__guard.html</anchorfile>
      <anchor>ac36e081268b8c8d14102ff6526e477cf</anchor>
      <arglist>(const synchronized&lt; std::remove_const_t&lt; GuardedType &gt;, MutexType &gt; &amp;sv, std::unique_lock&lt; MutexType &gt; lock)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator-&gt;</name>
      <anchorfile>classbtu_1_1common_1_1update__guard.html</anchorfile>
      <anchor>a6aa5335edee07ee28cb91f68ecd0f514</anchor>
      <arglist>() noexcept -&gt; GuardedType *</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator*</name>
      <anchorfile>classbtu_1_1common_1_1update__guard.html</anchorfile>
      <anchor>af49b6f517a572398f37abf5f51208f22</anchor>
      <arglist>() noexcept -&gt; GuardedType &amp;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>btu::common::UTF8Iterator</name>
    <filename>classbtu_1_1common_1_1_u_t_f8_iterator.html</filename>
    <member kind="typedef">
      <type>std::input_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>classbtu_1_1common_1_1_u_t_f8_iterator.html</anchorfile>
      <anchor>af39107fd7c7e102c9b345d591220c8e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classbtu_1_1common_1_1_u_t_f8_iterator.html</anchorfile>
      <anchor>a649272ffeecbcdd02e3a435e471b36c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>U8Unit</type>
      <name>value_type</name>
      <anchorfile>classbtu_1_1common_1_1_u_t_f8_iterator.html</anchorfile>
      <anchor>a1cb6af99f1534c57860816482a8d018f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>U8Unit</type>
      <name>pointer</name>
      <anchorfile>classbtu_1_1common_1_1_u_t_f8_iterator.html</anchorfile>
      <anchor>a6d29a6511a9325c3d0353babb4bb0170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>U8Unit</type>
      <name>reference</name>
      <anchorfile>classbtu_1_1common_1_1_u_t_f8_iterator.html</anchorfile>
      <anchor>adc9d6d3b56518a084d64ba0e20721aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>UTF8Iterator</name>
      <anchorfile>classbtu_1_1common_1_1_u_t_f8_iterator.html</anchorfile>
      <anchor>a16c1a8b2c7679f4448058981f5024d01</anchor>
      <arglist>(std::u8string_view string)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator*</name>
      <anchorfile>classbtu_1_1common_1_1_u_t_f8_iterator.html</anchorfile>
      <anchor>a4d491483f78ba947acd46678190c7340</anchor>
      <arglist>() const -&gt; reference</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator-&gt;</name>
      <anchorfile>classbtu_1_1common_1_1_u_t_f8_iterator.html</anchorfile>
      <anchor>ae8447c678f55ce8be09d151eb7f0c103</anchor>
      <arglist>() const -&gt; pointer</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator++</name>
      <anchorfile>classbtu_1_1common_1_1_u_t_f8_iterator.html</anchorfile>
      <anchor>a204f4de6971aad1fe28586ee8146b249</anchor>
      <arglist>() -&gt; UTF8Iterator &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator++</name>
      <anchorfile>classbtu_1_1common_1_1_u_t_f8_iterator.html</anchorfile>
      <anchor>a09365b20e871dd11586b6c563f703ac1</anchor>
      <arglist>(int) -&gt; UTF8Iterator</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator&lt;=&gt;</name>
      <anchorfile>classbtu_1_1common_1_1_u_t_f8_iterator.html</anchorfile>
      <anchor>a2e7e4711c2d1b55edfeef538336481f1</anchor>
      <arglist>(const UTF8Iterator &amp;other) const -&gt; std::strong_ordering</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator==</name>
      <anchorfile>classbtu_1_1common_1_1_u_t_f8_iterator.html</anchorfile>
      <anchor>a2740f217d8702b98e169fdc7e9da5f83</anchor>
      <arglist>(const UTF8Iterator &amp;other) const -&gt; bool</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>end</name>
      <anchorfile>classbtu_1_1common_1_1_u_t_f8_iterator.html</anchorfile>
      <anchor>ad3e80e6175c5dbe8e2fb35020a498d41</anchor>
      <arglist>(std::u8string_view string) -&gt; UTF8Iterator</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>detail::variant_switch</name>
    <filename>structdetail_1_1variant__switch.html</filename>
    <templarg>std::size_t N</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structdetail_1_1variant__switch.html</anchorfile>
      <anchor>a3f2537e99e821b01bacaf6997084d760</anchor>
      <arglist>(int index, nlohmann::json const &amp;value, Variant &amp;v) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>detail::variant_switch&lt; 0 &gt;</name>
    <filename>structdetail_1_1variant__switch_3_010_01_4.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structdetail_1_1variant__switch_3_010_01_4.html</anchorfile>
      <anchor>ab4de7930526006186f2997e2983a65aa</anchor>
      <arglist>(int index, nlohmann::json const &amp;value, Variant &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>structdetail_1_1variant__switch.html</anchorfile>
      <anchor>a3f2537e99e821b01bacaf6997084d760</anchor>
      <arglist>(int index, nlohmann::json const &amp;value, Variant &amp;v) const</arglist>
    </member>
  </compound>
  <compound kind="concept">
    <name>btu::common::basic_lockable</name>
    <filename>conceptbtu_1_1common_1_1basic__lockable.html</filename>
  </compound>
  <compound kind="concept">
    <name>btu::common::invocable_l_or_r</name>
    <filename>conceptbtu_1_1common_1_1invocable__l__or__r.html</filename>
  </compound>
  <compound kind="namespace">
    <name>btu</name>
    <filename>namespacebtu.html</filename>
    <namespace>btu::bsa</namespace>
    <namespace>btu::common</namespace>
    <namespace>btu::esp</namespace>
    <namespace>btu::hkx</namespace>
    <namespace>btu::modmanager</namespace>
    <namespace>btu::nif</namespace>
    <namespace>btu::tex</namespace>
    <member kind="typedef">
      <type>fs::path</type>
      <name>Path</name>
      <anchorfile>namespacebtu.html</anchorfile>
      <anchor>a7f2770a5475029ea6a940ad77d78d5fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Path::string_type</type>
      <name>OsString</name>
      <anchorfile>namespacebtu.html</anchorfile>
      <anchor>a87dde7c24b62b39b0acf7eb003cd4405</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Game</name>
      <anchorfile>namespacebtu.html</anchorfile>
      <anchor>a55c8573c42018dc0ba9a2b245bb0389c</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu.html" anchor="a55c8573c42018dc0ba9a2b245bb0389ca0b60c0585ee39f3be3182a626590973f">TES3</enumvalue>
      <enumvalue file="namespacebtu.html" anchor="a55c8573c42018dc0ba9a2b245bb0389ca1ae95fa14d6ffe3f7190f2b38c061da3">TES4</enumvalue>
      <enumvalue file="namespacebtu.html" anchor="a55c8573c42018dc0ba9a2b245bb0389cada43e31b688f49ee12211d560969c091">FNV</enumvalue>
      <enumvalue file="namespacebtu.html" anchor="a55c8573c42018dc0ba9a2b245bb0389ca0a1d07df9a43688c7128eefbe3d41b08">SLE</enumvalue>
      <enumvalue file="namespacebtu.html" anchor="a55c8573c42018dc0ba9a2b245bb0389ca5fc53fc8197865c63285f74b1e147013">SSE</enumvalue>
      <enumvalue file="namespacebtu.html" anchor="a55c8573c42018dc0ba9a2b245bb0389ca18d09913c8c422e9997a3170d0f00fe6">FO4</enumvalue>
      <enumvalue file="namespacebtu.html" anchor="a55c8573c42018dc0ba9a2b245bb0389ca6b9b64f3b2c617ea8c4c13ba78c7fa5a">Starfield</enumvalue>
      <enumvalue file="namespacebtu.html" anchor="a55c8573c42018dc0ba9a2b245bb0389ca90589c47f06eb971d548591f23c285af">Custom</enumvalue>
    </member>
  </compound>
  <compound kind="namespace">
    <name>btu::bsa</name>
    <filename>namespacebtu_1_1bsa.html</filename>
    <namespace>btu::bsa::dummy</namespace>
    <class kind="struct">btu::bsa::AllowedPath</class>
    <class kind="class">btu::bsa::Archive</class>
    <class kind="struct">btu::bsa::BsaErrCategory</class>
    <class kind="struct">btu::bsa::Error</class>
    <class kind="class">btu::bsa::FailureSourceCategory</class>
    <class kind="class">btu::bsa::File</class>
    <class kind="struct">btu::bsa::PackSettings</class>
    <class kind="struct">btu::bsa::UnpackSettings</class>
    <member kind="typedef">
      <type>{ {ArchiveVersion::tes3, &quot;tes3&quot;}, {ArchiveVersion::tes4, &quot;tes4&quot;}, {ArchiveVersion::fo3, &quot;fo3&quot;}, {ArchiveVersion::tes5, &quot;tes5&quot;}, {ArchiveVersion::sse, &quot;sse&quot;}, {ArchiveVersion::fo4, &quot;fo4&quot;}, {ArchiveVersion::starfield, &quot;starfield&quot;}, }) using TES4ArchiveType=libbsa::tes4::archive_type std::variant&lt; libbsa::tes3::file, libbsa::tes4::file, libbsa::fo4::file &gt;</type>
      <name>UnderlyingFile</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a060ba5efba26c8db773cc0558bfd9c57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; bool(const Path &amp;dir, fs::directory_entry const &amp;file_info)&gt;</type>
      <name>AllowFilePred</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>aaea20a57eb858e766fa66d2f6f63fc41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Compression</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>aaf303c16c182beacac6e98f978c9b745</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="aaf303c16c182beacac6e98f978c9b745a93cba07454f06a4a960172bbd6e2a435">Yes</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="aaf303c16c182beacac6e98f978c9b745abafd7322c6e97d25b6299b5d6fe8920b">No</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ArchiveType</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>adf8763fc66c61105a21fa893a65a1478</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="adf8763fc66c61105a21fa893a65a1478a536300d63028e7f16ba150566ecd3a5f">Textures</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="adf8763fc66c61105a21fa893a65a1478aeb6d8ae6f20283755b339c0dc273988b">Standard</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ArchiveVersion</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a912a6da4521bfdd9233fd4c14a820922</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a912a6da4521bfdd9233fd4c14a820922a37a98352f0e0d2f4d64e96fe334871ed">tes3</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a912a6da4521bfdd9233fd4c14a820922a27069e6baf4eba0ad33686287d582c97">tes4</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a912a6da4521bfdd9233fd4c14a820922a9251dddd50ef30adce51ad629526d447">fo3</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a912a6da4521bfdd9233fd4c14a820922a305506069f2dda79d68e638186b83a5e">tes5</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a912a6da4521bfdd9233fd4c14a820922a64192ca465194480a4621d6905dac5b7">sse</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a912a6da4521bfdd9233fd4c14a820922a87caba376d6bd426a47d310a1f0926bd">fo4</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a912a6da4521bfdd9233fd4c14a820922a9c9eb2831799b0af333d2bdbe05e367a">starfield</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BsaErr</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a3ba364428f80dd4da47fb2aa87fc95f6</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a3ba364428f80dd4da47fb2aa87fc95f6a505a83f220c02df2f85c3810cd9ceb38">Success</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a3ba364428f80dd4da47fb2aa87fc95f6a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a3ba364428f80dd4da47fb2aa87fc95f6af191aff944a56fa6688dc8f8495c3087">FailedToReadArchive</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a3ba364428f80dd4da47fb2aa87fc95f6a85543bf8fb545ccf32d55ed39839b99c">FailedToRemoveArchive</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a3ba364428f80dd4da47fb2aa87fc95f6a8d8a8dcac1a0d9c026796f6c8ba37e24">UnknownFormat</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a3ba364428f80dd4da47fb2aa87fc95f6a97d72ab1dc82f08dfc549a007bdb5d9d">FailedToWriteFile</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a3ba364428f80dd4da47fb2aa87fc95f6a807a5bf9719b423d9755b7a4cdd3373c">FailedToReadFile</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FailureSource</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a1711a65c450bac3822a5712f505b6e64</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a1711a65c450bac3822a5712f505b6e64a9d1a862ef0d00477f2bed3a77c94a983">BadUserInput</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a1711a65c450bac3822a5712f505b6e64ab932b91f686c2aa588adfd9a407155ca">SystemError</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileTypes</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a8d402424047b46ac4d1a3ef0ca75f09a</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a8d402424047b46ac4d1a3ef0ca75f09aaeb6d8ae6f20283755b339c0dc273988b">Standard</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a8d402424047b46ac4d1a3ef0ca75f09aaa3e8ae43188ae76d38f414b2bdb0077b">Texture</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a8d402424047b46ac4d1a3ef0ca75f09aa7d3fd181ccf56faf9e7d0ff8a217688e">Incompressible</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a8d402424047b46ac4d1a3ef0ca75f09aa85fffe8f5074d606fa202fa5ae90d8bb">Blacklist</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a8d402424047b46ac4d1a3ef0ca75f09aa409c1892b68cb394799262ac57f6d4f1">Plugin</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="a8d402424047b46ac4d1a3ef0ca75f09aa3c4107dba05635d12c5b7c340017b138">BSA</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PluginLoadingMode</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>aaa2ef8b6251d67812b0229750f671c11</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="aaa2ef8b6251d67812b0229750f671c11a7c2131ec78876ce749c2dadd24d47065">Limited</enumvalue>
      <enumvalue file="namespacebtu_1_1bsa.html" anchor="aaa2ef8b6251d67812b0229750f671c11a545f6c2f382c04810103b3e5e6f7d841">Unlimited</enumvalue>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>virtual_to_local_path</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a53793df278215f44f36fb42ef58fd4d9</anchor>
      <arglist>(const Keys &amp;...a_keys) noexcept -&gt; std::u8string</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NLOHMANN_JSON_SERIALIZE_ENUM</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a8da0acce4af5236a77ac088e55ca440c</anchor>
      <arglist>(ArchiveType, {{ArchiveType::Textures, &quot;textures&quot;}, {ArchiveType::Standard, &quot;standard&quot;}}) NLOHMANN_JSON_SERIALIZE_ENUM(ArchiveVersion</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_error_code</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a0980ed6a1928cf157fed9efa029129e2</anchor>
      <arglist>(BsaErr e) -&gt; std::error_code</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_error_condition</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>af6fe86093e1e5690ffd52b7ed5cfc4bb</anchor>
      <arglist>(FailureSource e) -&gt; std::error_condition</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>pack</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a26cc5d8f92aff3889c6b12fc6c281329</anchor>
      <arglist>(PackSettings settings) noexcept -&gt; flux::generator&lt; Archive &amp;&amp; &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>find_archive_name</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a30dc91cff0f12ce9f75268c8428abe9c</anchor>
      <arglist>(const Path &amp;directory, const Settings &amp;sets, ArchiveType type) noexcept -&gt; std::optional&lt; Path &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>list_archive</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>ad2e02c493d4e82dbfcad5fed59e154d7</anchor>
      <arglist>(const Path &amp;dir, const Settings &amp;sets) noexcept -&gt; std::vector&lt; Path &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>list_plugins</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a1d2bc4f31443d7f110336eb6309f9a9e</anchor>
      <arglist>(const Path &amp;dir, const Settings &amp;sets) noexcept -&gt; std::vector&lt; Path &gt;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clean_dummy_plugins</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a9b1c9f1f1e945ae53bda2cc20ed14936</anchor>
      <arglist>(std::span&lt; const Path &gt; plugins, const Settings &amp;sets)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>make_dummy_plugins</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a3fdaa04b7f22a071d1b73df1c22d4b0a</anchor>
      <arglist>(std::span&lt; const Path &gt; archives, const Settings &amp;sets)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remake_dummy_plugins</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a2f21eba915c18d6678549399973c168d</anchor>
      <arglist>(const Path &amp;directory, const Settings &amp;sets)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NLOHMANN_JSON_SERIALIZE_ENUM</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>aa6dd116b2c70c6b73fad0e6365cb792d</anchor>
      <arglist>(FileTypes, {{FileTypes::Standard, &quot;standard&quot;}, {FileTypes::Texture, &quot;texture&quot;}, {FileTypes::Incompressible, &quot;incompressible&quot;}, {FileTypes::Blacklist, &quot;blacklist&quot;}, {FileTypes::Plugin, &quot;plugin&quot;}, {FileTypes::BSA, &quot;bsa&quot;}}) static const expr auto k_bsa_ext</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NLOHMANN_JSON_SERIALIZE_ENUM</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a72673b2fb368c22103cde8e28019c9ec</anchor>
      <arglist>(PluginLoadingMode, {{PluginLoadingMode::Limited, &quot;limited&quot;}, {PluginLoadingMode::Unlimited, &quot;unlimited&quot;}})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a71709c1fee4b19975ed9b161779290aa</anchor>
      <arglist>(AllowedPath, extension, directories) struct Settings</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a6c4622138c408e49205acc0a8a3a48d8</anchor>
      <arglist>(Settings, game, max_size, version, has_texture_version, suffix, texture_suffix, extension, plugin_extensions, dummy_plugin, standard_files, texture_files, incompressible_files) inline auto Settings</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_filetype</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a83ca3cb323d37d4bafa20c9221b2c9a7</anchor>
      <arglist>(const Path &amp;filepath, const Path &amp;root, const Settings &amp;sets) -&gt; FileTypes</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_tes4_archive_type</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a69b40a92bcbd0d90b0021070aa73f0ce</anchor>
      <arglist>(const Path &amp;filepath, const Settings &amp;sets) -&gt; std::optional&lt; TES4ArchiveType &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>unpack</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a200c3f84e093376ad8e01be5c3b85eb1</anchor>
      <arglist>(UnpackSettings sets) noexcept -&gt; tl::expected&lt; void, common::Error &gt;</arglist>
    </member>
    <member kind="variable">
      <type>const BsaErrCategory</type>
      <name>k_bsa_err_category</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>aa64cbef36b1d87be82945891ed8096e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FailureSourceCategory</type>
      <name>k_failure_source_category</name>
      <anchorfile>namespacebtu_1_1bsa.html</anchorfile>
      <anchor>a02be46f5a379b17d48b5007ff13c7d48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>btu::bsa::dummy</name>
    <filename>namespacebtu_1_1bsa_1_1dummy.html</filename>
    <member kind="function">
      <type>constexpr auto</type>
      <name>as_bytes</name>
      <anchorfile>namespacebtu_1_1bsa_1_1dummy.html</anchorfile>
      <anchor>a1bd0b1161cbfcc37bf68e8b3dadb135b</anchor>
      <arglist>(std::array&lt; uint8_t, N &gt; data) -&gt; std::array&lt; std::byte, N &gt;</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>btu::common</name>
    <filename>namespacebtu_1_1common.html</filename>
    <namespace>btu::common::detail</namespace>
    <class kind="struct">btu::common::Cards</class>
    <class kind="struct">btu::common::Error</class>
    <class kind="class">btu::common::Exception</class>
    <class kind="class">btu::common::InvalidUTF8</class>
    <class kind="struct">btu::common::is_mutable_lambda</class>
    <class kind="struct">btu::common::is_mutable_lambda_helper</class>
    <class kind="struct">btu::common::is_mutable_lambda_helper&lt; Ret(Class::*)(Args...) const &gt;</class>
    <class kind="struct">btu::common::is_mutable_lambda_helper&lt; Ret(Class::*)(Args...)&gt;</class>
    <class kind="struct">btu::common::is_variant_member</class>
    <class kind="struct">btu::common::is_variant_member&lt; T, std::variant&lt; Ts... &gt; &gt;</class>
    <class kind="class">btu::common::Lazy</class>
    <class kind="struct">btu::common::Overload</class>
    <class kind="class">btu::common::synchronized</class>
    <class kind="class">btu::common::update_guard</class>
    <class kind="class">btu::common::UTF8Iterator</class>
    <concept>btu::common::invocable_l_or_r</concept>
    <concept>btu::common::basic_lockable</concept>
    <member kind="typedef">
      <type>std::is_same&lt; std::remove_cvref_t&lt; T &gt;, std::remove_cvref_t&lt; U &gt; &gt;</type>
      <name>is_equiv</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a83d1f2364aa0d1b00e60070f86a9686c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>U8Unit</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>ae9d13fbea52d07db3c550547508cdebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BS::thread_pool&lt;&gt;</type>
      <name>ThreadPool</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a5a182ad5e979501a5f114e0992983e75</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CaseSensitive</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a61798ee3368031a2fdf6784961f9f74e</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1common.html" anchor="a61798ee3368031a2fdf6784961f9f74ea93cba07454f06a4a960172bbd6e2a435">Yes</enumvalue>
      <enumvalue file="namespacebtu_1_1common.html" anchor="a61798ee3368031a2fdf6784961f9f74eabafd7322c6e97d25b6299b5d6fe8920b">No</enumvalue>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>merge_if</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a96c8e8d73f9ab5aa7fc8954c2238534a</anchor>
      <arglist>(It first, It last, const Predicate &amp;predicate, const Sum &amp;sum) -&gt; It</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>merge_if</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>ab77d02c9dcb2932211b897e2e854ac91</anchor>
      <arglist>(It first, It last, Predicate &amp;&amp;predicate) -&gt; It</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>merge_if</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>afbb64e534f6ea346b560b0fed2c588a9</anchor>
      <arglist>(Container &amp;cont, Predicate &amp;&amp;predicate)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>merge_if</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a57fff2dda5d605dccb67767073009007</anchor>
      <arglist>(Container &amp;cont, Predicate &amp;&amp;pred, Sum &amp;&amp;sum)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>contains</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a10495be73ddfc5f9e291114a04be0d2f</anchor>
      <arglist>(const Container &amp;cont, const ValueType &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove_duplicates</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>aa6bce492b41c063318ebddf1a3b70219</anchor>
      <arglist>(std::vector&lt; ValueType &gt; &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a88422224716bcb11a2447cccbdbd5cff</anchor>
      <arglist>(std::ostream &amp;os, std::source_location loc) -&gt; std::ostream &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a37cea9c0e839bf9b7a9b55298944a68a</anchor>
      <arglist>(std::ostream &amp;os, const Error &amp;err) -&gt; std::ostream &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>read_file</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>ab18cd27f1f67a7ab57a34cded847db23</anchor>
      <arglist>(const Path &amp;a_path) noexcept -&gt; tl::expected&lt; std::vector&lt; std::byte &gt;, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>write_file</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a54a4e49d65176b7268128f99b1be87c4</anchor>
      <arglist>(const Path &amp;a_path, std::span&lt; const std::byte &gt; data) noexcept -&gt; tl::expected&lt; void, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>write_file_new</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a12bd60389295f9266f1d5f0549e8f865</anchor>
      <arglist>(const Path &amp;a_path, std::span&lt; const std::byte &gt; data) noexcept -&gt; tl::expected&lt; void, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>compare_files</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a429b07c1596cd56ffd27961153607d5e</anchor>
      <arglist>(const Path &amp;filename1, const Path &amp;filename2) noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>compare_directories</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a7d05e36c9e7533fcccef4741ea5c0e99</anchor>
      <arglist>(const Path &amp;dir1, const Path &amp;dir2) noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>hard_link</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a162faf2c62f248b64e598ff5ab52d9b0</anchor>
      <arglist>(const Path &amp;from, const Path &amp;to) noexcept -&gt; tl::expected&lt; void, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>find_matching_paths_icase</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a07ed23d41cb70a78f400cd4d6973e3b0</anchor>
      <arglist>(const btu::Path &amp;directory, std::span&lt; const btu::Path &gt; relative_lowercase_paths) noexcept -&gt; std::vector&lt; btu::Path &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Overload</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>ab519d15eaac722ed7396cd428595fe1d</anchor>
      <arglist>(Ts...) -&gt; Overload&lt; Ts... &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>to_underlying</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>ab7492d8fcd1359ea41e7ee6bf529fa4a</anchor>
      <arglist>(E e) -&gt; std::underlying_type_t&lt; E &gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>forward_like</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a33d48135c71e18a168b0f6acaf3a8a4c</anchor>
      <arglist>(U &amp;&amp;x) noexcept -&gt; decltype(auto)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backslash_to_slash</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>aff74c52b1d89e2e856aeb6652d69c3cd</anchor>
      <arglist>(std::basic_string&lt; CharT &gt; &amp;path) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>make_path_canonizer</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>aad713cd4c12da91c4622c6d4f66a3f6e</anchor>
      <arglist>(std::u8string_view start)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_utf8</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a0bba54f0203d560751af304fdd31f6f4</anchor>
      <arglist>(std::string_view str) -&gt; std::u8string_view</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_ascii</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a9e13d7d4ca5e9afedd1d669841acb45a</anchor>
      <arglist>(std::u8string_view str) -&gt; std::string_view</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_utf8_string</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>af12fd235982b6703ec45f0bec395f5a4</anchor>
      <arglist>(const std::string &amp;str) -&gt; std::u8string</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>as_ascii_string</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a5f2cdd8ee6c9826499e7989a61bc85e9</anchor>
      <arglist>(const std::u8string &amp;str) -&gt; std::string</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>to_utf8</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a4c35904a87c5e732d21aed632ff337bd</anchor>
      <arglist>(const std::wstring &amp;str) -&gt; std::u8string</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>to_utf16</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a918bb9ded2898b1e3b4ccfe70ede3830</anchor>
      <arglist>(const std::u8string &amp;str) -&gt; std::wstring</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>str_compare</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>aaa1b5d4d4e5eadf92039ec927f4e7484</anchor>
      <arglist>(std::u8string_view lhs, std::u8string_view rhs, CaseSensitive case_sensitive=CaseSensitive::Yes) -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>str_find</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a64cfaba57076b74bc89ee31e5193a7bf</anchor>
      <arglist>(std::u8string_view string, std::u8string_view snippet, CaseSensitive case_sensitive=CaseSensitive::Yes) -&gt; size_t</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>str_contain</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>ae4b406bd818998622f6106265a0799e1</anchor>
      <arglist>(std::u8string_view string, std::u8string_view snippet, CaseSensitive case_sensitive=CaseSensitive::Yes) -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>str_starts_with</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a2350c38996805e37331483dc4337f3d3</anchor>
      <arglist>(std::u8string_view string, std::u8string_view snippet, CaseSensitive case_sensitive=CaseSensitive::Yes) -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>str_trim</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>aab271409e6a788c454de47ed3548df02</anchor>
      <arglist>(std::u8string_view in) noexcept -&gt; std::u8string_view</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>str_random</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>abe50e5074516441e67f90a6865bd668b</anchor>
      <arglist>(size_t length, std::span&lt; const char8_t &gt; charset=k_lower_alphabetic_charset) noexcept -&gt; std::u8string</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>str_match</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a2ae3fe6bc5dd16bebe3cf7ec2cd76551</anchor>
      <arglist>(std::u8string_view string, std::u8string_view pattern, CaseSensitive case_sensitive=CaseSensitive::Yes, Cards cards=default_cards) -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>to_lower</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a826b7aad4faf85b999346ff8d19cd3fe</anchor>
      <arglist>(std::u8string_view string) -&gt; std::u8string</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>is_lower</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>aa4b64cfc59995c3419300e54d91c9532</anchor>
      <arglist>(std::u8string_view string) -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>first_codepoint</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a80c8eeac75c9aca858329e787a79866b</anchor>
      <arglist>(std::u8string_view string) -&gt; U8Unit</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>concat_codepoint</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a579cef42371f299a202de48a39b7b304</anchor>
      <arglist>(std::u8string &amp;string, U8Unit cp)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_valid</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a00f5099c820274df2dded37fc07c9bfc</anchor>
      <arglist>(std::u8string &amp;string, char8_t replacement) noexcept -&gt; std::u8string &amp;</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>str_replace_once</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>ad036bdab0df992a629bfac779db0dc03</anchor>
      <arglist>(std::u8string &amp;string, std::u8string_view from, std::u8string_view to, CaseSensitive case_sensitive) -&gt; std::u8string &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>hardware_concurrency</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a08cf3f339a1fa2d298e2a61af8e1e9cf</anchor>
      <arglist>() noexcept -&gt; unsigned</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_thread_pool</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a062a7dee57e04f8b83a09e9bce6feb1e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>for_each_mt</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a183562c5d3ac5031383b3a83f70dc7ee</anchor>
      <arglist>(Range &amp;&amp;rng, Func &amp;&amp;func)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_producer_mt</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a22cb8105c4872dafb5d721d1e8a7c6fc</anchor>
      <arglist>(Range &amp;&amp;rng, Func &amp;&amp;func)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr detail::bind_back_fn</type>
      <name>bind_back</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a4cd0799cfb94e2b507438e766a4d01d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_equiv_v</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>af7f7c7d55e6100daba4cae2aa7042157</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_variant_member_v</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a8d31016cf18c062508a3aa8e9bbabdb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_mutable_lambda_v</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a29a10199500f4692f97ef9a0fb4fdcbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>k_lower_alphabetic_charset</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>abe37a6c95755acc9febcd740131a7ac3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr Cards</type>
      <name>default_cards</name>
      <anchorfile>namespacebtu_1_1common.html</anchorfile>
      <anchor>a3bbc4219bf316197c6f1aae17cf7ca75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>btu::common::detail</name>
    <filename>namespacebtu_1_1common_1_1detail.html</filename>
    <class kind="struct">btu::common::detail::bind_back_fn</class>
    <class kind="struct">btu::common::detail::bind_back_fn_</class>
    <member kind="typedef">
      <type>bind_back_fn_&lt; std::decay_t&lt; Fn &gt;, std::decay_t&lt; Args &gt;... &gt;</type>
      <name>bind_back_fn2</name>
      <anchorfile>namespacebtu_1_1common_1_1detail.html</anchorfile>
      <anchor>a6505fa3938953a971528a1efb54a63a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>assert_valid_utf8</name>
      <anchorfile>namespacebtu_1_1common_1_1detail.html</anchorfile>
      <anchor>aef3ac9eb3fd9f6a351de78f9aa5b4d4c</anchor>
      <arglist>(std::u8string_view str)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>btu::esp</name>
    <filename>namespacebtu_1_1esp.html</filename>
    <namespace>btu::esp::detail</namespace>
    <class kind="struct">btu::esp::Error</class>
    <class kind="struct">btu::esp::EspErrCategory</class>
    <class kind="class">btu::esp::FailureSourceCategory</class>
    <member kind="enumeration">
      <type></type>
      <name>EspErr</name>
      <anchorfile>namespacebtu_1_1esp.html</anchorfile>
      <anchor>a7ef552dc5fd9d29c85ab93bdf0107a7e</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1esp.html" anchor="a7ef552dc5fd9d29c85ab93bdf0107a7ea505a83f220c02df2f85c3810cd9ceb38">Success</enumvalue>
      <enumvalue file="namespacebtu_1_1esp.html" anchor="a7ef552dc5fd9d29c85ab93bdf0107a7ea88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</enumvalue>
      <enumvalue file="namespacebtu_1_1esp.html" anchor="a7ef552dc5fd9d29c85ab93bdf0107a7ea807a5bf9719b423d9755b7a4cdd3373c">FailedToReadFile</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FailureSource</name>
      <anchorfile>namespacebtu_1_1esp.html</anchorfile>
      <anchor>a5852d06153f2662fd17608df1459c62c</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1esp.html" anchor="a5852d06153f2662fd17608df1459c62ca9d1a862ef0d00477f2bed3a77c94a983">BadUserInput</enumvalue>
      <enumvalue file="namespacebtu_1_1esp.html" anchor="a5852d06153f2662fd17608df1459c62cab932b91f686c2aa588adfd9a407155ca">SystemError</enumvalue>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_error_code</name>
      <anchorfile>namespacebtu_1_1esp.html</anchorfile>
      <anchor>a5fb9bf2dfe777c6f3373833e81832325</anchor>
      <arglist>(EspErr e) -&gt; std::error_code</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_error_condition</name>
      <anchorfile>namespacebtu_1_1esp.html</anchorfile>
      <anchor>a4126cc99c6d292604c125a69a93e288f</anchor>
      <arglist>(FailureSource e) -&gt; std::error_condition</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>list_headparts</name>
      <anchorfile>namespacebtu_1_1esp.html</anchorfile>
      <anchor>a8403d68cb507c3f2dadf6c1949f203fd</anchor>
      <arglist>(const Path &amp;input) noexcept -&gt; tl::expected&lt; std::vector&lt; std::u8string &gt;, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>list_headparts</name>
      <anchorfile>namespacebtu_1_1esp.html</anchorfile>
      <anchor>afb89fcd8c859ed07d84d0727e87aa598</anchor>
      <arglist>(std::fstream file) noexcept -&gt; tl::expected&lt; std::vector&lt; std::u8string &gt;, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>list_landscape_textures</name>
      <anchorfile>namespacebtu_1_1esp.html</anchorfile>
      <anchor>ae2071295cd5b50bc00fed29b8a5a777c</anchor>
      <arglist>(const Path &amp;input) noexcept -&gt; tl::expected&lt; std::vector&lt; std::u8string &gt;, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>list_landscape_textures</name>
      <anchorfile>namespacebtu_1_1esp.html</anchorfile>
      <anchor>ad3ddf08ec2cebaf331ab461abfe619ce</anchor>
      <arglist>(std::fstream file) noexcept -&gt; tl::expected&lt; std::vector&lt; std::u8string &gt;, Error &gt;</arglist>
    </member>
    <member kind="variable">
      <type>const EspErrCategory</type>
      <name>k_esp_err_category</name>
      <anchorfile>namespacebtu_1_1esp.html</anchorfile>
      <anchor>a18dbddf2038552cd74769fc42001eb1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FailureSourceCategory</type>
      <name>k_failure_source_category</name>
      <anchorfile>namespacebtu_1_1esp.html</anchorfile>
      <anchor>afd277c533732379b2610fe4e3c89f1bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>btu::esp::detail</name>
    <filename>namespacebtu_1_1esp_1_1detail.html</filename>
    <class kind="struct">btu::esp::detail::PluginFieldHeader</class>
    <class kind="union">btu::esp::detail::PluginRecordHeader</class>
    <class kind="struct">btu::esp::detail::RecordHeader</class>
    <member kind="function">
      <type></type>
      <name>__pragma</name>
      <anchorfile>namespacebtu_1_1esp_1_1detail.html</anchorfile>
      <anchor>aa5b3a1cbe7d021f61376cc3f7504ed44</anchor>
      <arglist>(pack(push, 1)) struct PluginHeader</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>__pragma</name>
      <anchorfile>namespacebtu_1_1esp_1_1detail.html</anchorfile>
      <anchor>a0135cdd6102a85ce74ab0de0123c9890</anchor>
      <arglist>(pack(pop)) __pragma(pack(push</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>k_group_tes4</name>
      <anchorfile>namespacebtu_1_1esp_1_1detail.html</anchorfile>
      <anchor>a1ac945fe28cc62e94df0799c99cff002</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>k_group_grup</name>
      <anchorfile>namespacebtu_1_1esp_1_1detail.html</anchorfile>
      <anchor>a1ab6f1b21b4e60469f3257761538bb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>k_group_hdpt</name>
      <anchorfile>namespacebtu_1_1esp_1_1detail.html</anchorfile>
      <anchor>a6b8ecd73137c407a33fa19141ed7e2cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>k_group_modl</name>
      <anchorfile>namespacebtu_1_1esp_1_1detail.html</anchorfile>
      <anchor>ad892715c620a8ea8f9f1ac6f630f6b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>k_group_ltex</name>
      <anchorfile>namespacebtu_1_1esp_1_1detail.html</anchorfile>
      <anchor>ad2b79b18fc7f5cdc3204e3f7a6a1dda3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>k_group_tnam</name>
      <anchorfile>namespacebtu_1_1esp_1_1detail.html</anchorfile>
      <anchor>ac3b754bdcf42c90ec6c28d7f42738579</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>k_group_txst</name>
      <anchorfile>namespacebtu_1_1esp_1_1detail.html</anchorfile>
      <anchor>ab3acb9f83bf941266c0d658ad05a0484</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>k_group_tx00</name>
      <anchorfile>namespacebtu_1_1esp_1_1detail.html</anchorfile>
      <anchor>a483a20b20ecd68b051697d3125859b85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>btu::hkx</name>
    <filename>namespacebtu_1_1hkx.html</filename>
    <namespace>btu::hkx::detail</namespace>
    <class kind="struct">btu::hkx::AnimErrCategory</class>
    <class kind="class">btu::hkx::AnimExe</class>
    <class kind="struct">btu::hkx::Error</class>
    <class kind="class">btu::hkx::FailureSourceCategory</class>
    <member kind="typedef">
      <type>tl::expected&lt; void, Error &gt;</type>
      <name>ResultError</name>
      <anchorfile>namespacebtu_1_1hkx.html</anchorfile>
      <anchor>a5e36a5ff4277f0fc7412263e3e7c52f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AnimErr</name>
      <anchorfile>namespacebtu_1_1hkx.html</anchorfile>
      <anchor>ac2b016539a57eb9f7d2e73cd9b85be30</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1hkx.html" anchor="ac2b016539a57eb9f7d2e73cd9b85be30a505a83f220c02df2f85c3810cd9ceb38">Success</enumvalue>
      <enumvalue file="namespacebtu_1_1hkx.html" anchor="ac2b016539a57eb9f7d2e73cd9b85be30a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</enumvalue>
      <enumvalue file="namespacebtu_1_1hkx.html" anchor="ac2b016539a57eb9f7d2e73cd9b85be30a25e41af7aadb308a82dc06c3b42580c3">NoAppropriateExe</enumvalue>
      <enumvalue file="namespacebtu_1_1hkx.html" anchor="ac2b016539a57eb9f7d2e73cd9b85be30a82b5e838b02b2216b3adc1c473885ae2">ExeFailed</enumvalue>
      <enumvalue file="namespacebtu_1_1hkx.html" anchor="ac2b016539a57eb9f7d2e73cd9b85be30aa72a3b9a01ae1bdc41689f8c1c1b1b83">NoExeFound</enumvalue>
      <enumvalue file="namespacebtu_1_1hkx.html" anchor="ac2b016539a57eb9f7d2e73cd9b85be30a8c3f9381fc13b23b9880803759d2be5f">OsNotSupported</enumvalue>
      <enumvalue file="namespacebtu_1_1hkx.html" anchor="ac2b016539a57eb9f7d2e73cd9b85be30a71560591df6f91eea8303fea4ce49338">NoOutputFile</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FailureSource</name>
      <anchorfile>namespacebtu_1_1hkx.html</anchorfile>
      <anchor>ad84b9f1615cf31c618bffd9b31672253</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1hkx.html" anchor="ad84b9f1615cf31c618bffd9b31672253a9d1a862ef0d00477f2bed3a77c94a983">BadUserInput</enumvalue>
      <enumvalue file="namespacebtu_1_1hkx.html" anchor="ad84b9f1615cf31c618bffd9b31672253ab932b91f686c2aa588adfd9a407155ca">SystemError</enumvalue>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_error_code</name>
      <anchorfile>namespacebtu_1_1hkx.html</anchorfile>
      <anchor>ae14b9c3c7a56f050cdc0bb4105ebeb8f</anchor>
      <arglist>(AnimErr e) -&gt; std::error_code</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_error_condition</name>
      <anchorfile>namespacebtu_1_1hkx.html</anchorfile>
      <anchor>aa514d1a44cdcf5d8a928a0d8ea287874</anchor>
      <arglist>(FailureSource e) -&gt; std::error_condition</arglist>
    </member>
    <member kind="variable">
      <type>const AnimErrCategory</type>
      <name>k_anim_err_category</name>
      <anchorfile>namespacebtu_1_1hkx.html</anchorfile>
      <anchor>a28fec9f773f65287c797c953a0b01ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FailureSourceCategory</type>
      <name>k_failure_source_category</name>
      <anchorfile>namespacebtu_1_1hkx.html</anchorfile>
      <anchor>a43c28e99ff9748f67dc9362dce6d69f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>btu::hkx::detail</name>
    <filename>namespacebtu_1_1hkx_1_1detail.html</filename>
    <class kind="class">btu::hkx::detail::AnimExeInfo</class>
    <member kind="typedef">
      <type>std::reference_wrapper&lt; const AnimExeInfo &gt;</type>
      <name>AnimExeRef</name>
      <anchorfile>namespacebtu_1_1hkx_1_1detail.html</anchorfile>
      <anchor>aa3e87817c6e81678348ee0f142eaf87c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>btu::modmanager</name>
    <filename>namespacebtu_1_1modmanager.html</filename>
    <class kind="struct">btu::modmanager::ModFile</class>
    <class kind="class">btu::modmanager::ModFolder</class>
    <class kind="class">btu::modmanager::ModFolderIterator</class>
    <class kind="class">btu::modmanager::ModFolderIteratorBase</class>
    <class kind="class">btu::modmanager::ModFolderTransformer</class>
    <member kind="enumeration">
      <type></type>
      <name>ModManager</name>
      <anchorfile>namespacebtu_1_1modmanager.html</anchorfile>
      <anchor>a2e6702350b697326872f83c130e65fa2</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1modmanager.html" anchor="a2e6702350b697326872f83c130e65fa2a8e11b2f987a99ed900a44aa1aa8bd3d0">Vortex</enumvalue>
      <enumvalue file="namespacebtu_1_1modmanager.html" anchor="a2e6702350b697326872f83c130e65fa2a9d45ded384011b8e9bcd836259143741">MO2</enumvalue>
      <enumvalue file="namespacebtu_1_1modmanager.html" anchor="a2e6702350b697326872f83c130e65fa2a62bb7e71879e6671209a5235f551c4e5">ManualForced</enumvalue>
      <enumvalue file="namespacebtu_1_1modmanager.html" anchor="a2e6702350b697326872f83c130e65fa2a6adf97f83acf6453d4a6a4b1070f3754">None</enumvalue>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>find_manager</name>
      <anchorfile>namespacebtu_1_1modmanager.html</anchorfile>
      <anchor>abe686c1e196037a674997bde528e5ae7</anchor>
      <arglist>(const Path &amp;dir) -&gt; ModManager</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>k_force_process_folder</name>
      <anchorfile>namespacebtu_1_1modmanager.html</anchorfile>
      <anchor>a13c823db6014a0b758d1b5c33495fb81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>btu::nif</name>
    <filename>namespacebtu_1_1nif.html</filename>
    <class kind="class">btu::nif::Mesh</class>
    <class kind="struct">btu::nif::Settings</class>
    <member kind="typedef">
      <type>common::Error</type>
      <name>Error</name>
      <anchorfile>namespacebtu_1_1nif.html</anchorfile>
      <anchor>a9199f38c25d0f46365ecbe7966513b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>tl::expected&lt; void, Error &gt;</type>
      <name>ResultError</name>
      <anchorfile>namespacebtu_1_1nif.html</anchorfile>
      <anchor>a29eba4689bfc9217b2ace98b5dfbf52f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>HeadpartStatus</name>
      <anchorfile>namespacebtu_1_1nif.html</anchorfile>
      <anchor>ae24e43c2602e8c9c7b6ef00273513939</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1nif.html" anchor="ae24e43c2602e8c9c7b6ef00273513939a93cba07454f06a4a960172bbd6e2a435">Yes</enumvalue>
      <enumvalue file="namespacebtu_1_1nif.html" anchor="ae24e43c2602e8c9c7b6ef00273513939abafd7322c6e97d25b6299b5d6fe8920b">No</enumvalue>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>convert</name>
      <anchorfile>namespacebtu_1_1nif.html</anchorfile>
      <anchor>abeb91c78c53d575ede65ada566647d3a</anchor>
      <arglist>(Mesh file, HeadpartStatus headpart, Game game) -&gt; tl::expected&lt; Mesh, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rename_referenced_textures</name>
      <anchorfile>namespacebtu_1_1nif.html</anchorfile>
      <anchor>a7af52e712f09e2a4078abe1dedfec390</anchor>
      <arglist>(Mesh &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>nif_optimize</name>
      <anchorfile>namespacebtu_1_1nif.html</anchorfile>
      <anchor>a935cd9bb0f8473c61120763c320e273f</anchor>
      <arglist>(Mesh &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>load</name>
      <anchorfile>namespacebtu_1_1nif.html</anchorfile>
      <anchor>a45f3c2dcd02f6236fb33d65b30bf9179</anchor>
      <arglist>(Path path) noexcept -&gt; tl::expected&lt; Mesh, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>load</name>
      <anchorfile>namespacebtu_1_1nif.html</anchorfile>
      <anchor>a061ad2c6412b6e84a6351fdd1e8bac77</anchor>
      <arglist>(Path relative_path, std::span&lt; std::byte &gt; data) noexcept -&gt; tl::expected&lt; Mesh, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>save</name>
      <anchorfile>namespacebtu_1_1nif.html</anchorfile>
      <anchor>a55230cc968c4cc039141f0b698fe103c</anchor>
      <arglist>(Mesh mesh, const Path &amp;path) noexcept -&gt; ResultError</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>save</name>
      <anchorfile>namespacebtu_1_1nif.html</anchorfile>
      <anchor>a8f0a5aae9db1e472954629c030f66cc2</anchor>
      <arglist>(Mesh mesh) noexcept -&gt; tl::expected&lt; std::vector&lt; std::byte &gt;, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</name>
      <anchorfile>namespacebtu_1_1nif.html</anchorfile>
      <anchor>ad012e4ef905c0ffb736141d789342ce7</anchor>
      <arglist>(Settings, target_game, rename_referenced_textures, optimize) struct OptimizationSteps</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>optimize</name>
      <anchorfile>namespacebtu_1_1nif.html</anchorfile>
      <anchor>a978b6e36240efc842f2d818ec3799acb</anchor>
      <arglist>(Mesh file, const OptimizationSteps &amp;steps) -&gt; tl::expected&lt; Mesh, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>compute_optimization_steps</name>
      <anchorfile>namespacebtu_1_1nif.html</anchorfile>
      <anchor>af99b4543d21eab52dc8fe299dabe6410</anchor>
      <arglist>(const Mesh &amp;file, const Settings &amp;sets) -&gt; OptimizationSteps</arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>canonize_path</name>
      <anchorfile>namespacebtu_1_1nif.html</anchorfile>
      <anchor>a3512d8f8fe6350395d7ceab6507ffdc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>btu::tex</name>
    <filename>namespacebtu_1_1tex.html</filename>
    <namespace>btu::tex::detail</namespace>
    <class kind="struct">btu::tex::BestFormatFor</class>
    <class kind="class">btu::tex::CompressionDevice</class>
    <class kind="class">btu::tex::CrunchTexture</class>
    <class kind="struct">btu::tex::Dimension</class>
    <class kind="struct">btu::tex::Error</class>
    <class kind="class">btu::tex::FailureSourceCategory</class>
    <class kind="struct">btu::tex::GuessBestFormatArgs</class>
    <class kind="struct">btu::tex::Settings</class>
    <class kind="class">btu::tex::Texture</class>
    <class kind="struct">btu::tex::TextureErrCategory</class>
    <member kind="typedef">
      <type>tl::expected&lt; Texture, Error &gt;</type>
      <name>Result</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a88545eaa7db80a8455ea83689a8a3414</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>tl::expected&lt; CrunchTexture, Error &gt;</type>
      <name>ResultCrunch</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a435e14781b8d930665e9f4669c7e454d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>tl::expected&lt; void, Error &gt;</type>
      <name>ResultError</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>ad15ae3a93606cfd462ec90d79e38579f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TextureErr</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a7fd1865c9f7112dba737c8f0139d6d44</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a7fd1865c9f7112dba737c8f0139d6d44a505a83f220c02df2f85c3810cd9ceb38">Success</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a7fd1865c9f7112dba737c8f0139d6d44a88183b946cc5f0e8c96b2e66e1c74a7e">Unknown</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a7fd1865c9f7112dba737c8f0139d6d44a8b7d8393ddfcc4835eebb36815f49c00">BadInput</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a7fd1865c9f7112dba737c8f0139d6d44a6a10b4834f9cabcc57ddbf0ee05eeb47">MemoryAllocation</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a7fd1865c9f7112dba737c8f0139d6d44af2b0e5c3d94c2f5b19d679412a1953cb">WriteFailure</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a7fd1865c9f7112dba737c8f0139d6d44a031fc00961e3ca3a7ab20a1b16595f32">ReadFailure</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FailureSource</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a75eb4ad855a5020111cf4ebdd4d0a114</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a75eb4ad855a5020111cf4ebdd4d0a114a9d1a862ef0d00477f2bed3a77c94a983">BadUserInput</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a75eb4ad855a5020111cf4ebdd4d0a114ab932b91f686c2aa588adfd9a407155ca">SystemError</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>TextureType</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a310091cdb4b029eaf1d0b3a292140a57</anchor>
      <arglist></arglist>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a310091cdb4b029eaf1d0b3a292140a57a41178642cae095a6bdb909119b4d16e8">Diffuse</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a310091cdb4b029eaf1d0b3a292140a57a960b44c579bc2f6818d2daaf9e4c16f0">Normal</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a310091cdb4b029eaf1d0b3a292140a57aa296104f0c61a9cf39f4824d05315e12">Cube</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a310091cdb4b029eaf1d0b3a292140a57a39b0044dd8789d333e7794f359406740">Specular</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a310091cdb4b029eaf1d0b3a292140a57ab20024ea3ba53768598d242981872153">Glow</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a310091cdb4b029eaf1d0b3a292140a57ac626285221f3850191ea3ce4b917779c">Parallax</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a310091cdb4b029eaf1d0b3a292140a57a0423447d761b57c8b427cbf52ed97cff">ModelSpaceNormal</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a310091cdb4b029eaf1d0b3a292140a57a18a864ad6df2d8ea8c8943c5c0e8dc47">Backlight</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a310091cdb4b029eaf1d0b3a292140a57a9313566fe19aca293daefe4ce37942bf">Skin</enumvalue>
      <enumvalue file="namespacebtu_1_1tex.html" anchor="a310091cdb4b029eaf1d0b3a292140a57a70478db3f0a15e1925ef0712136fe092">EnvironmentMask</enumvalue>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>resize</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a37d36a9cd3980aa04b4cb2e4acc1b5da</anchor>
      <arglist>(CrunchTexture &amp;&amp;file, Dimension dim) -&gt; ResultCrunch</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>generate_mipmaps</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a83e9fefe55a474c50720ffe6d7b2c44b</anchor>
      <arglist>(CrunchTexture &amp;&amp;file) -&gt; ResultCrunch</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>convert</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a451c578ae7846888c8382e5066ba5fdb</anchor>
      <arglist>(CrunchTexture &amp;&amp;file, DXGI_FORMAT format) -&gt; ResultCrunch</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>load_crunch</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a88578eddda7d3bcb0a3d4b9711e0bbce</anchor>
      <arglist>(Path path) noexcept -&gt; tl::expected&lt; CrunchTexture, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>load_crunch</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>af9329a4464d9102118893f0489dd79b6</anchor>
      <arglist>(Path relative_path, std::span&lt; const std::byte &gt; data) noexcept -&gt; tl::expected&lt; CrunchTexture, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>save</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>acf9d02b7b56c9f638c1bf66481566bf2</anchor>
      <arglist>(const CrunchTexture &amp;tex, const Path &amp;path) noexcept -&gt; ResultError</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>save</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>ad9b2bd00a87338cc0986e63d16270f65</anchor>
      <arglist>(const CrunchTexture &amp;tex) noexcept -&gt; tl::expected&lt; std::vector&lt; std::byte &gt;, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>ae3ac2ed05c078e1fd64ac5fc31404881</anchor>
      <arglist>(Dimension, w, h) namespace util</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_error_code</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a414e4f1b5ee867c7ab8953454e63588d</anchor>
      <arglist>(TextureErr e) -&gt; std::error_code</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_error_condition</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>ac8fff66d71570c4b7e2cc05e28573a77</anchor>
      <arglist>(FailureSource e) -&gt; std::error_condition</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>error_from_hresult</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>ab538d4f4ca3e23d0f5838340413b806c</anchor>
      <arglist>(int64_t hr, std::error_code default_err=TextureErr::Unknown, std::source_location loc=std::source_location::current()) -&gt; Error</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a17ddefb2e0611a77aac1b28224bc0c0a</anchor>
      <arglist>(BestFormatFor, uncompressed, uncompressed_without_alpha, compressed, compressed_without_alpha)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NLOHMANN_JSON_SERIALIZE_ENUM</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>ad8bdf0468ca8336c9430dbbc724fbbbf</anchor>
      <arglist>(TextureType, {{TextureType::Diffuse, &quot;diffuse&quot;}, {TextureType::Normal, &quot;normal&quot;}, {TextureType::Cube, &quot;cube&quot;}, {TextureType::Specular, &quot;specular&quot;}, {TextureType::Glow, &quot;glow&quot;}, {TextureType::Parallax, &quot;parallax&quot;}, {TextureType::ModelSpaceNormal, &quot;model_space_normal&quot;}, {TextureType::Backlight, &quot;backlight&quot;}, {TextureType::Skin, &quot;skin&quot;}, {TextureType::EnvironmentMask, &quot;environment_mask&quot;}})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a8e2258d147c6dd0199db53198c9d5490</anchor>
      <arglist>(GuessBestFormatArgs, opaque_alpha, allow_compressed, force_alpha)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>guess_texture_type</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a997827cd10143f950ff10e11bd61c27f</anchor>
      <arglist>(std::u8string_view path) noexcept -&gt; std::optional&lt; TextureType &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>guess_best_format</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>aa1d2c15be442f3704f9241912a21f3a4</anchor>
      <arglist>(DXGI_FORMAT current_format, BestFormatFor formats, const GuessBestFormatArgs &amp;guess_params) noexcept -&gt; DXGI_FORMAT</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>decompress</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a596c07ddbaf7f756699b2d5644698412</anchor>
      <arglist>(Texture &amp;&amp;file) -&gt; Result</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>make_transparent_alpha</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a42a7ea80fe5cf427cf7c8a6f67a26900</anchor>
      <arglist>(Texture &amp;&amp;file) -&gt; Result</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>convert</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>ac08ea78afcad96d45c6c0d683f463e41</anchor>
      <arglist>(Texture &amp;&amp;file, DXGI_FORMAT format, CompressionDevice &amp;dev) -&gt; Result</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>optimal_mip_count</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a88583309caffff946dea632ffa126181</anchor>
      <arglist>(Dimension dim) noexcept -&gt; size_t</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>generate_mipmaps</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>ae2bc7bbc61efcd88c08a269d80d45f2f</anchor>
      <arglist>(Texture &amp;&amp;file) -&gt; Result</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>resize</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>ae4f8c8542060c06233ee6b8d31251029</anchor>
      <arglist>(Texture &amp;&amp;file, Dimension dim) -&gt; Result</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NLOHMANN_DEFINE_TYPE_NON_INTRUSIVE</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>aadf2f648b607db82ec019b3b04f8357b</anchor>
      <arglist>(Settings, game, compress, resize, mipmaps, use_format_whitelist, allowed_formats, output_format, landscape_textures) struct OptimizationSteps</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>optimize</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a602ae2f29e41d6478abf6c5f31869987</anchor>
      <arglist>(Texture &amp;&amp;file, OptimizationSteps sets, CompressionDevice &amp;dev) noexcept -&gt; Result</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>optimize</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>abd1df80a31375dfa3f332ce15da9fa0e</anchor>
      <arglist>(CrunchTexture &amp;&amp;file, OptimizationSteps sets, CompressionDevice &amp;dev) noexcept -&gt; ResultCrunch</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>compute_optimization_steps</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>ae181f96a4805e40fb4dc9ff226486b52</anchor>
      <arglist>(const Texture &amp;file, const Settings &amp;sets) noexcept -&gt; OptimizationSteps</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>compute_optimization_steps</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a0771bab778b84485960a92908fbd40ee</anchor>
      <arglist>(const CrunchTexture &amp;file, const Settings &amp;sets) noexcept -&gt; OptimizationSteps</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>load</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>ac82ab61898eaf157bc2d88808b933692</anchor>
      <arglist>(Path path) noexcept -&gt; tl::expected&lt; Texture, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>load</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a9a88c0330e4c37b22c32a8c86d31d4cc</anchor>
      <arglist>(Path relative_path, std::span&lt; std::byte &gt; data) noexcept -&gt; tl::expected&lt; Texture, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>save</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a46dff17e413356e6f006fa5d43d18dbb</anchor>
      <arglist>(const Texture &amp;tex, const Path &amp;path) noexcept -&gt; ResultError</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>save</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a529f953fff3fdb97c6a603625f7a573a</anchor>
      <arglist>(const Texture &amp;tex) noexcept -&gt; tl::expected&lt; std::vector&lt; std::byte &gt;, Error &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>to_string</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a452e3440fda008bd2cb019ae4b105827</anchor>
      <arglist>(DXGI_FORMAT format) -&gt; std::u8string_view</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>from_string</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a4a90a0f688ba7395d9f763aebd40c77a</anchor>
      <arglist>(std::u8string_view str) -&gt; DXGI_FORMAT</arglist>
    </member>
    <member kind="variable">
      <type>const TextureErrCategory</type>
      <name>k_texture_err_category</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a53fa4654edb32d86b890279a1a2051b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const FailureSourceCategory</type>
      <name>k_failure_source_category</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a58f3a9df9f2f20747ba57724ec9df388</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>canonize_path</name>
      <anchorfile>namespacebtu_1_1tex.html</anchorfile>
      <anchor>a3783c7c2c4c09dc40adef5bd6165d81a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>btu::tex::detail</name>
    <filename>namespacebtu_1_1tex_1_1detail.html</filename>
    <class kind="struct">btu::tex::detail::StringFormat</class>
    <member kind="variable">
      <type>constexpr std::array</type>
      <name>k_dxgi_formats</name>
      <anchorfile>namespacebtu_1_1tex_1_1detail.html</anchorfile>
      <anchor>aee18729f171f776dd8325382cb20d94d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>crnlib</name>
    <filename>namespacecrnlib.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator==</name>
      <anchorfile>namespacecrnlib.html</anchorfile>
      <anchor>a4417fcdf94d06721e7368ff90184fd5b</anchor>
      <arglist>(const image_u8 &amp;lhs, const image_u8 &amp;rhs) noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator==</name>
      <anchorfile>namespacecrnlib.html</anchorfile>
      <anchor>a02ec87b9f5b86f9218565b5e01f0019b</anchor>
      <arglist>(const mipmapped_texture &amp;lhs, const mipmapped_texture &amp;rhs) noexcept -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>detail</name>
    <filename>namespacedetail.html</filename>
    <class kind="struct">detail::variant_switch</class>
    <class kind="struct">detail::variant_switch&lt; 0 &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>DirectX</name>
    <filename>namespace_direct_x.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>operator==</name>
      <anchorfile>namespace_direct_x.html</anchorfile>
      <anchor>a5b83ecfaaf1a2f949f27f1185b590478</anchor>
      <arglist>(const ScratchImage &amp;lhs, const ScratchImage &amp;rhs) noexcept -&gt; bool</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator==</name>
      <anchorfile>namespace_direct_x.html</anchorfile>
      <anchor>a4235554aa3874370ad325e5685039b34</anchor>
      <arglist>(const TexMetadata &amp;lhs, const TexMetadata &amp;rhs) noexcept -&gt; bool</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>nlohmann</name>
    <filename>namespacenlohmann.html</filename>
    <class kind="struct">nlohmann::adl_serializer&lt; DXGI_FORMAT &gt;</class>
    <class kind="struct">nlohmann::adl_serializer&lt; std::monostate &gt;</class>
    <class kind="struct">nlohmann::adl_serializer&lt; std::optional&lt; T &gt; &gt;</class>
    <class kind="struct">nlohmann::adl_serializer&lt; std::variant&lt; Args... &gt; &gt;</class>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>bethutil</title>
    <filename>index.html</filename>
  </compound>
</tagfile>
