name: Main CI

on:
  push:
    branches: [ main ]
    paths:
      - '**/*.cpp'
      - '**/*.hpp'
      - '**/CMakeLists.txt'
      - '**/CMakePresets.txt'
      - '**/cmake/**'
      - '**/vcpkg.json'
      - '.github/workflows/main_ci.yml'
      - 'codecov.yml'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  BUILD_TYPE: Debug
  VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/vcpkg-cache

jobs:
  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        config: [ gcc ]
        include:
          - config: gcc
            version: '11'

    steps:
      - uses: actions/checkout@v2
        with:
          path: bethutil

      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: ${{ matrix.version }}

      - name: Setup vcpkg
        run: |
          mkdir ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          cd $VCPKG_INSTALLATION_ROOT
          ./bootstrap-vcpkg.sh
          ./vcpkg --version > ${{ github.workspace }}/vcpkg-version.txt

      - name: Cache vcpkg
        uses: actions/cache@v2
        id: vcpkg-cache
        env:
          cache-name: vcpkg-cache
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('bethutil/**/vcpkg.json', 'vcpkg-version.txt') }}

      - name: Setup Environment
        run: |
          echo "GCOV=gcov-${{ matrix.version }}" >> $GITHUB_ENV

          sudo apt-get install ninja-build

          sudo pip install gcovr

      - name: Configure & Build
        working-directory: ${{ github.workspace }}/bethutil
        run: |
          cmake --preset ninja-linux -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBETHUTIL_BUILD_DOCS=OFF -DBUILD_TESTING=ON
          cmake --build build

      - name: Test
        working-directory: ${{ github.workspace }}/bethutil/build
        env:
          gcovr: gcovr -r .. . --coveralls --exclude-unreachable-branches --exclude-function-lines --exclude-throw-branches
        run: |
          ls

          (cd tests && ./tests [src])
          ${{ env.gcovr }} -f ".*/src/.*" -f ".*/include/.*" -o src.json

          find -type f -name *.gcda | xargs rm

          (cd tests && ./tests [examples])
          ${{ env.gcovr }} -f ".*/examples/.*" -o examples.json

      - name: Collect code coverage
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          files: bethutil/build/examples.json,bethutil/build/src.json
          verbose: true

  windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
        with:
          path: bethutil

      - name: Install OpenCPPCoverage
        working-directory: ${{ github.workspace }}/bethutil/scripts/opencppcoverage
        run: |
          choco pack
          choco install opencppcoverage -s . -y

      - name: Setup vcpkg
        run: |
          mkdir -p ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
          cd $env:VCPKG_INSTALLATION_ROOT
          ./bootstrap-vcpkg.bat
          ./vcpkg --version > ${{ github.workspace }}/vcpkg-version.txt

      - name: Cache vcpkg
        uses: actions/cache@v2
        id: vcpkg-cache
        env:
          cache-name: vcpkg-cache
        with:
          path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}/*
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('bethutil/**/vcpkg.json', 'vcpkg-version.txt') }}

      - name: Setup MSVC (x64)
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: Configure & Build
        working-directory: ${{ github.workspace }}/bethutil
        run: |
          cmake --preset ninja-windows -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DBETHUTIL_BUILD_DOCS=OFF -DBUILD_TESTING=ON
          cmake --build build

      - name: (main) Test
        working-directory: ${{ github.workspace }}/bethutil/build
        run: |
          & "$($env:SystemDrive)/Program Files/OpenCppCoverage/OpenCppCoverage.exe" -q --sources bethutil\examples --sources bethutil\src --sources bethutil\tests --cover_children --export_type cobertura -- ctest -C ${{ env.BUILD_TYPE }} -V --rerun-failed --output-on-failure

      - name: (main) Collect code coverage
        uses: codecov/codecov-action@v2
        with:
          fail_ci_if_error: true
          files: build/ctestCoverage.xml
          working-directory: ${{ github.workspace }}/bethutil/build
